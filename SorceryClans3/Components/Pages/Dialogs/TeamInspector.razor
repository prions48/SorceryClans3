@inject IDialogService dialogService
<MudDialog>
    <DialogContent>
        <MudStack Row>
            <MudText>COM: @Team.CScore</MudText>
            <MudText>MAG: @Team.MScore</MudText>
            <MudText>SUB: @Team.SScore</MudText>
            @if (Team.KScore > 0)
            {
                <MudText>HEAL: @Team.KScore</MudText>
            }
            <MudText>TRAVEL: @Team.DScore</MudText>
            <MudText>LEAD: @Team.LeadText</MudText>
        </MudStack>
        <MudSimpleTable Striped Bordered Outlined>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Power</th>
                    <th>Combat</th>
                    <th>Magic</th>
                    <th>Subtlety</th>
                    <th>HP</th>
                    <th>Heal</th>
                    <th>Power</th>
                    <th>Artifact</th>
                    <th>Leadership</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <TeamSoldierInspector Soldiers="Team.Leaders" ToggleLeader="UnmakeLeader" RemoveSoldier="RemoveSoldier" ActionsAvailable="Team.MissionID == null && Team.IsAtHome" />
                @if (Team.Leaders.Count > 0)
                {
                    <tr>
                        <td colspan="11"><hr /></td>
                    </tr>
                }
                <TeamSoldierInspector Soldiers="Team.Soldiers" ToggleLeader="MakeLeader" RemoveSoldier="RemoveSoldier" ActionsAvailable="Team.MissionID == null && Team.IsAtHome" />
                @if (Team.GetColors.Count > 0)
                {
                    <tr>
                        <td colspan="11">
                            <MudStack Row=true>
                                Team Magic:
                                <MagicIcons Colors="Team.GetColors" />
                            </MudStack>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        @if (AvailableSoldiers.Count > 0)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AddSoldier">Add Soldier</MudButton>
        }
        <MudButton Variant="Variant.Filled" OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Team Team { get; set; } = new();
    [Parameter] public List<Soldier> AvailableSoldiers { get; set; } = [];
    void Cancel() => MudDialog.Close(DialogResult.Cancel());
    private void MakeLeader(Soldier s)
    {
        Team.Leaders.Add(s);
        Team.Soldiers.Remove(s);
        StateHasChanged();
    }
    private void UnmakeLeader(Soldier s)
    {
        Team.Soldiers.Add(s);
        Team.Leaders.Remove(s);
        StateHasChanged();
    }
    private async void RemoveSoldier(Soldier s)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Small;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConfirmDialog.Text), $"Are you sure you want to remove {s.SoldierName} from {Team.TeamName}?");
        parameters.Add(nameof(ConfirmDialog.Button), "Confirm");
        parameters.Add(nameof(ConfirmDialog.ButtonColor), Color.Info);
        var dialog = dialogService.Show<ConfirmDialog>("Confirm Removal", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team.Soldiers.Remove(s);
            Team.Leaders.Remove(s);
            s.Team = null;
            StateHasChanged();
        }
    }
    private async Task AddSoldier()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(SoldierPicker.Soldiers), AvailableSoldiers);
        parameters.Add(nameof(SoldierPicker.ShowStats), true);
        var dialog = dialogService.Show<SoldierPicker>("Add Soldier", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            if (result.Data is Soldier sold)
            {
                Team.Soldiers.Add(sold);
                sold.Team = Team;
            }
        }
    }
}