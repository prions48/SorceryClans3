@namespace SorceryClans3.Components.Pages.Dialogs
@using SorceryClans3.Data.Abstractions
@inject IDialogService dialogService

@foreach (Soldier s in Soldiers.Where(e => !e.IsSub || ShowSubs))
{
    <tr>
        <td>@s.SoldierName</td>
        <td>@s.PowerLevel</td>
        <td>@s.Combat</td>
        <td>@s.Magic</td>
        <td>@s.Subtlety</td>
        <td>
            <HPInspector Soldier="s" />
        </td>
        <td>@s.HealScore</td>
        <td>
            @if (s.Power != null)
            {
                <MudIconButton Icon="@s.Power.Icon" Color="@(s.Power.IconColor)" OnClick="() => ViewPower(s)" />
            }
        </td>
        <td>
            @if (s.Artifact != null)
            {
                <MudIconButton Icon="@s.Artifact.Icon" Color="Color.Primary" OnClick="() => ViewArtifact(s.Artifact)" />
            }
        </td>
        <td>
            @if (s.IsLeading)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Groups" Color="Color.Info" OnClick="() => ViewLeadership(s)" />
                <MudIconButton Icon="@Icons.Material.Filled.ChangeCircle" Color="Color.Primary" OnClick="() => Toggle(s)" />
            }
        </td>
        <td>
            @if (ActionsAvailable)
            {
                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.TwoTone.RemoveCircle" OnClick="() => Remove(s)" />
            }
        </td>
    </tr>
    <TeamSoldierInspector Soldiers="s.SubSoldiers" ShowSubs="true" />
}

<MudDialog @bind-Visible="ViewLead">
    <TitleContent>@SelectedSoldier?.SoldierName</TitleContent>
    <DialogContent>
        <LeadInspector Soldier="SelectedSoldier" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="ViewPow">
    <TitleContent>@SelectedPower?.PowerName</TitleContent>
    <DialogContent>
        <PowerInspector Power="SelectedPower" Powerlevel="PowerLevel" />
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public List<Soldier> Soldiers { get; set; } = [];
    [Parameter] public bool ShowSubs { get; set; } = false;
    [Parameter] public Action<Soldier> ToggleLeader { get; set; }
    [Parameter] public Action<Soldier> RemoveSoldier { get; set; }
    [Parameter] public bool ActionsAvailable { get; set; } = false;
    private bool ViewPow = false;
    private Power? SelectedPower { get; set; }
    private int? PowerLevel { get; set; }
    private void ViewPower(Soldier soldier)
    {
        SelectedPower = soldier.Power;
        PowerLevel = soldier.PowerLevel;
        ViewPow = true;
    }
    private bool ViewLead = false;
    private async Task ViewArtifact(Artifact art)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add("Artifact", art);
        var dialog = dialogService.Show<ArtifactInspector>(art.ArtifactName, parameters, options);
        var result = await dialog.Result;
    }
    private Soldier? SelectedSoldier { get; set; }
    private string? SelectedLeadName { get; set; }
    private void ViewLeadership(Soldier sold)
    {
        SelectedSoldier = sold;
        ViewLead = true;
    }
    private void Toggle(Soldier sold)
    {
        ToggleLeader.Invoke(sold);
    }
    private void Remove(Soldier sold)
    {
        //confirm dialog here
        RemoveSoldier.Invoke(sold);
    }

}