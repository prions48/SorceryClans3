@page "/play"
@namespace SorceryClans3.Components.Pages
@using System.Timers
@using SorceryClans3.Data.Users
@using SorceryClans3.Components.Pages.Dialogs
@inject ISnackbar Snackbar
@inject IDialogService dialogService

<MudTabs Position="Position.Left" Color="Color.Info">
    <MudTabPanel Text="Live">
        <MudStack>
            <MudToggleIconButton @bind-Toggled="Engine.Settings.RealTime" Icon="@Icons.Material.TwoTone.LockClock" Color="Color.Info"
                ToggledIcon="@Icons.Material.TwoTone.Timer" ToggledColor="Color.Primary" Disabled="Started" />
            @if (!Started)
            {
                <MudButton OnClick="Start">Start Game</MudButton>
            }
            else
            {
                <MudText>@Engine.Settings.CurrentTime.ToString(DTFormat)</MudText>
                @if (!Engine.Settings.RealTime)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="StartTime">Advance Time</MudButton>
                }
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Cheat">Cheat</MudButton>
            }
            <MudSimpleTable Striped Bordered>
                <thead>
                    <tr>
                        <th>Event</th>
                        <th>Remaining</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (GameEvent gameEvent in Engine.VisibleEvents)
                    {
                        <tr>
                            <td>@gameEvent.Type.ToString()</td>
                            <td>
                                @if (gameEvent.FixedDate)
                                {
                                    @(gameEvent.EventCompleted.Subtract(Engine.Settings.CurrentTime).ToString(TSFormat) + (Engine.Settings.RealTime ? "" : " days"))
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
            <MudExpansionPanels>
                <MudExpansionPanel Text="History">
                    <MudSimpleTable Striped Bordered>
                        <thead>
                            <tr>
                                <th>Event</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (GameEventDisplay gameEvent in HistoryEvents.OrderByDescending(e => e.EventDate))
                            {
                                <tr>
                                    <td>@gameEvent.DisplayText</td>
                                    <td>
                                        @gameEvent.EventDate.ToString(DTFormat)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Clans">
        <MudTable Items="Clans" Striped Outlined>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Lvl</MudTh>
                <MudTh>Stats</MudTh>
                <MudTh>Power</MudTh>
                <MudTh># Soldiers</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ClanName</MudTd>
                <MudTd>@context.EliteLevel</MudTd>
                <MudTd>@context.DisplayStats</MudTd>
                <MudTd>
                    @if (context.Power != null)
                    {
                        <MudIconButton Icon="@context.Power.Color.Icon()" Color="@context.Power.Color.Color()" OnClick="() => ViewPower(context.Power)" />
                    }
                </MudTd>
                <MudTd>@Soldiers.Count(e => e.ClanID == context.ID)</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Soldiers">
        <MudStack>
            <MudStack Row>
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="NewMedicDialog">Medical Assessment</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="LeadershipDialog">Leadership Assessment</MudButton>
            </MudStack>
            <MudTable Items="Soldiers" Striped Outlined>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Lvl</MudTh>
                    <MudTh>Stats</MudTh>
                    <MudTh>Leader</MudTh>
                    <MudTh>Power</MudTh>
                    <MudTh>Artifact</MudTh>
                    <MudTh>Team</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.SoldierName</MudTd>
                    <MudTd>@context.PowerLevel</MudTd>
                    <MudTd></MudTd>
                    <MudTd>
                        @if (context.IsLeading)
                        {
                            <MudIconButton Icon="@Icons.Material.TwoTone.Group" Color="Color.Info" OnClick="() => ViewLeader(context)" />
                        }
                    </MudTd>
                    <MudTd>
                        @if (context.Power != null)
                        {
                            <MudIconButton Icon="@context.Power.Color.Icon()" Color="@context.Power.Color.Color()" OnClick="() => ViewPower(context)" />
                        }
                    </MudTd>
                    <MudTd>@context.Artifact?.ArtifactName</MudTd>
                    <MudTd>@context.Team?.TeamName</MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Teams">
        <MudStack>
            @if (Soldiers.Any(e => e.Team == null))
            {
                <MudButton OnClick="CreateTeam" Variant="Variant.Filled" Color="Color.Info">Create New Team</MudButton>
            }
            <MudTable Items="Teams">
                <HeaderContent>
                    <MudTh>Team Name</MudTh>
                    <MudTh>Com</MudTh>
                    <MudTh>Mag</MudTh>
                    <MudTh>Sub</MudTh>
                    <MudTh>Heal</MudTh>
                    <MudTh># Soldiers</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.TeamName</MudTd>
                    <MudTd>@context.CScore</MudTd>
                    <MudTd>@context.MScore</MudTd>
                    <MudTd>@context.SScore</MudTd>
                    <MudTd>@context.KScore</MudTd>
                    <MudTd>@context.SoldierCount</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.TwoTone.ManageAccounts" Color="Color.Info" OnClick="() => ManageTeam(context)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Assignments">
        <MudTabs Position="Position.Top">
            <MudTabPanel Text="Clients">
                <MudTable Items="Engine.Clients" Striped Bordered>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Distance</MudTh>
                        <MudTh>Reputation</MudTh>
                        <MudTh>Liaisons</MudTh>
                        <MudTh>Teams</MudTh>
                        <MudTh>Resources</MudTh>
                        <MudTh>View Contracts</MudTh>
                        <MudTh>View Missions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.CityName</MudTd>
                        <MudTd>@context.Distance</MudTd>
                        <MudTd>@context.Reputation.ToString()</MudTd>
                        <MudTd>
                            <table>
                                <tbody>
                                    @foreach (Team team in context.Liaisons)
                                    {
                                        <tr>
                                            <td>@team.TeamName</td>
                                            <td>
                                                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.TwoTone.RemoveCircle" OnClick="() => RecallTeamFromCity(context, team, true)" Disabled="team.MissionID != null" />
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2">
                                            <MudIconButton Color="Color.Success" Icon="@Icons.Material.TwoTone.AddCircle" OnClick="() => AssignTeamToCity(context, true)" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </MudTd>
                        <MudTd>
                            <table>
                                <tbody>
                                    @foreach (Team team in context.Teams)
                                    {
                                        <tr>
                                            <td>@team.TeamName</td>
                                            <td>
                                                <MudIconButton Color="Color.Warning" Icon="@Icons.Material.TwoTone.RemoveCircle" OnClick="() => RecallTeamFromCity(context, team, false)"  Disabled="team.MissionID != null" />
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="2">
                                            <MudIconButton Color="Color.Success" Icon="@Icons.Material.TwoTone.AddCircle" OnClick="() => AssignTeamToCity(context, false)" Disabled="context.Liaisons.Count == 0" />
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </MudTd>
                        <MudTd>
                            <MudButton OnClick="() => ClientResources(context)" Variant="Variant.Outlined" Color="Color.Info" Disabled="context.Resources.AllCount == 0">@MoneyAbbrev(context.Resources)</MudButton>
                        </MudTd>
                        <MudTd>@*Contracts*@
                            @if (context.Liaisons.Any(e => e.MissionID == null))
                            {
                                <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="() => ViewCityContracts(context)" Disabled="context.Contracts.Count == 0">@context.Contracts.Count</MudButton>
                            }
                            else
                            {
                                @("Unknown")
                            }
                        </MudTd>
                        <MudTd>@*Missions*@
                            @if (context.Liaisons.Any(e => e.MissionID == null))
                            {
                                <MudButton Color="Color.Info" Variant="Variant.Outlined" OnClick="() => ViewCityMissions(context)" Disabled="context.Missions.Count == 0">@context.Missions.Count</MudButton>
                            }
                            else
                            {
                                @("Unknown")
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Defenses">
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="DefenseBuilds">Defense Buildings</MudButton>
                <MudTable Items="Engine.Defenses.Structures">
                    <HeaderContent>
                        <MudTh>Building</MudTh>
                        <MudTh>Team</MudTh>
                        <MudTh>Assignment</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Type.ToString()</MudTd>
                        <MudTd>@context.Team?.TeamName</MudTd>
                        <MudTd>
                            @if (context.Team == null)
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.Send" Color="Color.Info" OnClick="() => DefenseAssign(context)" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.RemoveCircle" Color="Color.Warning" OnClick="() => DefenseUnassign(context)" />
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Academy">
                <MudStack>
                    <MudStack Row>
                        <MudText>CScore: @Engine.Academy.CombatScore.ToString("N1")</MudText>
                        <MudText>MScore: @Engine.Academy.MagicScore.ToString("N1")</MudText>
                        <MudText>SScore: @Engine.Academy.SubtletyScore.ToString("N1")</MudText>
                    </MudStack>
                    <MudSimpleTable Striped Bordered>
                        <thead>
                            <tr>
                                @foreach (AcademyRole role in Enum.GetValues(typeof(AcademyRole)))
                                {
                                    <th>@role.ToString()</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @foreach (AcademyRole role in Enum.GetValues(typeof(AcademyRole)))
                                {
                                    <td>
                                        @if (Engine.Academy.HeadInstructors.ContainsKey(role))
                                        {
                                            @(Engine.Academy.HeadInstructors[role]?.SoldierName ?? "Unassigned")
                                        }
                                        else
                                        {
                                            @("Unassigned")
                                        }
                                        <MudIconButton OnClick="() => AssignInstructor(role)" Icon="@Icons.Material.TwoTone.AddCircle" Color="Color.Info" />
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                    <MudButton OnClick="AddTeamToAcademy" Variant="Variant.Filled" Color="Color.Info">Add Team</MudButton>
                    <MudTable Items="Engine.Academy.Teams">
                        <HeaderContent>
                            <MudTh>Team Name</MudTh>
                            <MudTh>Com</MudTh>
                            <MudTh>Mag</MudTh>
                            <MudTh>Sub</MudTh>
                            <MudTh># Soldiers</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.TeamName</MudTd>
                            <MudTd>@context.CScore</MudTd>
                            <MudTd>@context.MScore</MudTd>
                            <MudTd>@context.SScore</MudTd>
                            <MudTd>@context.SoldierCount</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.TwoTone.RemoveCircle" Color="Color.Info" OnClick="() => RemoveAcademyTeam(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStack>
            </MudTabPanel>
            <MudTabPanel Text="Research">
                <MudStack>
                    <MudStack Row>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="CreateFacility" Disabled="Engine.Research.Facilities.Count >= Engine.Settings.FacilityLimit">Build New Research Facility</MudButton>
                    </MudStack>
                    <MudTable Striped Bordered Items="Engine.Research.Facilities">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Research Facilities</MudText>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Info</MudTh>
                            <MudTh>Project</MudTh>
                            <MudTh>Target</MudTh>
                            <MudTh>Progress</MudTh>
                            <MudTh>Upgrade</MudTh>
                            <MudTh>Teams</MudTh>
                            <MudTh>Research</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.DisplayInfo</MudTd>
                            <MudTd>
                                @if (context.Project == null)
                                {
                                    <MudButton Size="Size.Small" Color="Color.Info" OnClick="() => CreateProject(context)">Create</MudButton>
                                }
                                else
                                {
                                    <MagicIcons Colors="new List<MagicColor>() { context.Project.GetColor }" />
                                }
                            </MudTd>
                            <MudTd>
                                @if (context.Project != null)
                                {
                                    <MudButton Variant="Variant.Outlined" Color="context.Project.GetColor.Color()" OnClick="() => SetThreshold(context)">@context.Project.ThresholdDisplay</MudButton>
                                }
                            </MudTd>
                            <MudTd>
                                @if (context.Project != null)
                                {
                                    @context.Project.Progress
                                }
                            </MudTd>
                            <MudTd>
                                <MudIconButton Color="Color.Info" OnClick="() => UpgradeFacility(context)" Disabled="context.NumTeams >= Engine.Settings.FacilityMaxTeams" Icon="@Icons.Material.TwoTone.BuildCircle" />
                            </MudTd>
                            <MudTd>
                                <MudIconButton Color="Color.Info" OnClick="() => ManageFacility(context)" Icon="@Icons.Material.TwoTone.Groups" />
                            </MudTd>
                            <MudTd>@((context.Project?.Missions.Count ?? 0).ToString()) Teams</MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudTable Striped Bordered Items="Engine.Research.Spells">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Spells</MudText>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>View</MudTh>
                            <MudTh>Power</MudTh>
                            <MudTh>Money</MudTh>
                            <MudTh>Consumables</MudTh>
                            <MudTh>Cast</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.SpellName</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@context.Color.Icon()" Color="@context.Color.Color()" OnClick="() => ViewSpell(context)" />
                            </MudTd>
                            <MudTd>@context.CastDisplay</MudTd>
                            <MudTd>@context.MoneyToCast.ToString("C")</MudTd>
                            <MudTd>@context.ConsumableCountDisplay</MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.TwoTone.MenuBook" Color="Color.Info" OnClick="() => StartCastSpell(context)" Disabled="!context.Castable" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </MudTabPanel>
    <MudTabPanel Text="Missions">
        <MudTabs Position="Position.Top">
            <MudTabPanel Text="Rescue"></MudTabPanel>
            <MudTabPanel Text="Resources">
                <MudTable Striped Bordered Items="Engine.Research.Spells.Where(e => e.Consumables > 0 && (e.BeastPet != null || e.Beast != null))">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>View</MudTh>
                        <MudTh>Send Team</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.SpellName</MudTd>
                        <MudTd>
                            @if (context.Beast != null)
                            {
                                <MudIconButton OnClick="() => ViewBeast(context.Beast)" Icon="@Icons.Material.TwoTone.Pets" Color="Color.Success" />
                            }
                            else if (context.BeastPet != null)
                            {
                                <MudIconButton OnClick="() => ViewPet(context.BeastPet)" Icon="@Icons.Material.TwoTone.Pets" Color="Color.Success" />
                            }
                        </MudTd>
                        <MudTd>
                            <MudIconButton OnClick="() => StartHuntMission(context)" Icon="@Icons.Material.TwoTone.TrackChanges" Color="Color.Info" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Exploration"></MudTabPanel>
            <MudTabPanel Text="Training">
                <MudSimpleTable Striped Bordered>
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Send Team</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Medical Training</td>
                            <td>
                                <MudButton OnClick="StartMedicTraining" Variant="Variant.Filled" Color="Color.Info">Select Team</MudButton>
                            </td>
                        </tr>
                        <tr>
                            <td>Leadership Training</td>
                            <td>
                                <MudButton OnClick="StartLeadership" Variant="Variant.Filled" Color="Color.Info">Select Team</MudButton>
                            </td>
                        </tr>
                        <tr>
                            <td>Alchemy Training</td>
                            <td>Button</td>
                        </tr>
                    </tbody>
                </MudSimpleTable>
            </MudTabPanel>
        </MudTabs>
    </MudTabPanel>
    <MudTabPanel Text="Resources">
        <MudSimpleTable Striped Bordered>
            <thead>
                <tr>
                    <th>Resource</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Money</td>
                    <td>@Engine.Resources.Money.ToString("C")</td>
                </tr>
                <tr>
                    <td>Artifacts</td>
                    <td>
                        <MudButton OnClick="OpenArtifactDialog" Variant="Variant.Outlined" Color="Color.Info">@Engine.Resources.Artifacts.Count</MudButton>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </MudTabPanel>
    <MudTabPanel Text="Defenses"></MudTabPanel>
</MudTabs>

<MudDialog @bind-Visible="ShowEventDialog" Options="new DialogOptions() { CloseOnEscapeKey=false, BackdropClick=false, FullWidth=true, MaxWidth=MaxWidth.ExtraLarge }">
    <DialogContent>
        <MudSimpleTable Striped Bordered>
            <thead>
                <tr>
                    <th>Info</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (GameEventDisplay display in DisplayEvents)
                {
                    <tr>
                        <td>@display.DisplayText</td>
                        <td>
                            @if (display.OpenHealDialog)
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.MedicalServices" Color="Color.Error" OnClick="() => OpenHealDialog(display)" />
                            }
                            @if (display.DisplayTeam != null)
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.RemoveRedEye" Color="Color.Info" OnClick="() => ManageTeam(display.DisplayTeam, false)" />
                            }
                            @if (display.OpenRescueDialog)
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.ShieldMoon" Color="Color.Primary" OnClick="() => OpenRescueDialog(display)" />
                            }
                            @if (display.NewSoldier != null)
                            {
                                <MudIconButton Icon="@Icons.Material.TwoTone.PersonAdd" Color="Color.Success" OnClick="() => ViewSoldier(display.NewSoldier)" />
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CloseEventDialog" Disabled="DisplayEvents.Any(e => e.OpenHealDialog || e.OpenRescueDialog)">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="ViewLeadDialog">
    <TitleContent>@SelectedLeader?.SoldierName</TitleContent>
    <DialogContent>
        <LeadInspector Soldier="SelectedLeader" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CloseLead">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] public Auth0User? User { get; set; }
    private List<Clan> Clans { get { return Engine.Clans; } }
    private List<Soldier> Soldiers { get { return Engine.Soldiers; } }
    private List<Team> Teams { get { return Engine.Teams; } }
    private List<Mission> Missions { get { return Engine.Missions; } }
    private GameEngine Engine { get; set; } = new();
    private List<GameEventDisplay> DisplayEvents { get; set; } = [];
    private List<GameEventDisplay> HistoryEvents { get; set; } = [];
    private string TSFormat
    {
        get
        {
            if (Engine.Settings.RealTime)
                return @"hh\:mm\:ss"; //return @"hh\:mm\:ss\:ff";
            return "%d";
        }
    }
    private string DTFormat
    {
        get
        {
            if (Engine.Settings.RealTime)
                return @"MM/dd/yy hh\:mm tt";
            return "MMM d, Year y";
        }
    }
    private bool ViewLeadDialog = false;
    private Soldier? SelectedLeader { get; set; } = null;
    private void ViewLeader(Soldier soldier)
    {
        SelectedLeader = soldier;
        ViewLeadDialog = true;
    }
    private async Task ViewSoldier(Soldier soldier)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Medium;
        var parameters = new DialogParameters();
        parameters.Add(nameof(SoldierInspectorDialog.Soldier), soldier);
        var dialog = dialogService.Show<SoldierInspectorDialog>(soldier.SoldierName, parameters, options);
        var result = await dialog.Result;
    }
    private void CloseLead()
    {
        SelectedLeader = null;
        ViewLeadDialog = false;
    }
    private void Cheat()
    {
        foreach (Soldier soldier in Engine.Soldiers)
        {
            soldier.GainPower(1000);
        }
    }
    protected override void OnInitialized()
    {
        Timer = new Timer(500);
        Timer.Elapsed += OnTimedEvent;
        Random r = new Random();
        int x = 3;
        for (int i = 0; i < 4; i++)
        {
            Clan clan = new Clan(x);
            Engine.Clans.Add(clan);
            for (int j = 0; j < r.Next(3)+4; j++)
            {
                Soldier soldier = new Soldier(clan);
                if (r.Next(soldier.PowerLevel) > 1500)
                {
                    soldier.CreateLeader();
                    soldier.LeadershipXPBase = r.NextDouble()*1.3 - 0.4;
                }
                if (r.Next(2) == 0 && r.Next(soldier.PowerLevel) > 1000)
                {
                    soldier.CreateHealer();
                    soldier.Medical!.MedicalPowerBase = r.Next(soldier.Medical.HealBase*10);
                }
                Engine.Soldiers.Add(soldier);
            }
            if (x == 3)
                x = 2;
            else
                x = 1;
        }
        //resources
        Engine.Resources.Money = 50000 + r.Next(10000);
        Engine.Resources.Artifacts.Add(new(5));
        Engine.Resources.Artifacts.Add(new(5));
        //START: team for testing only
        List<Soldier> TopSoldiers = Soldiers.OrderByDescending(e => e.PowerLevel * (e.Combat + e.Subtlety + e.Magic + e.Heal)).ToList();
        Engine.Teams.Add(new Team() {
            TeamName = "Dragon"
        });
        TopSoldiers = TopSoldiers.Take(4).ToList();
        foreach (Soldier s in TopSoldiers)
            Engine.Teams.First().AddSoldier(s);
        //END: team for testing only
        for (int i = 0; i <= 5; i++)
        {
            ClientCity city = new(i);
            city.NewMissionCycle(Engine.Settings);
            Engine.Clients.Add(city);
        }
        //Engine.Clients.First().Liaisons.Add(Engine.Teams.First());
        //Engine.Teams.First().MissionID = Engine.Clients.First().ID;
    }
    private async Task CreateTeam()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraExtraLarge;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add("Soldiers", Soldiers.Where(e => e.Team == null).ToList());
        var dialog = dialogService.Show<SoldierTeamPicker>("Select Soldiers", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? newteam = result.Data as Team;
            if (newteam != null)
            {
                Engine.Teams.Add(newteam);
            }
        }
    }
    private async Task ManageTeam(Team team, bool addsoldiers = true)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraExtraLarge;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamInspector.Team), team);
        if (addsoldiers)
            parameters.Add(nameof(TeamInspector.AvailableSoldiers), Engine.Soldiers.Where(e => e.Team == null).ToList());
        var dialog = dialogService.Show<TeamInspector>("View Team " + team.TeamName, parameters, options);
        var result = await dialog.Result;
    }
    private bool RealTime { get; set; } = false;
    private bool Started { get; set; } = false;
    private void Start()
    {
        Started = true;
        if (Engine.Settings.RealTime)
            Timer.Enabled = true;
    }
    private async Task ShowEvents(List<GameEventDisplay> displays)
    {
        if (displays.Count == 0)
            return;
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add(nameof(DisplayEventDialog.DisplayEvents), displays);
        var dialog = dialogService.Show<DisplayEventDialog>("View Events", parameters, options);
        var result = await dialog.Result;
        int i = 0;
        while (i < displays.Count)
        {
            if (DisplayEvents.Contains(displays[i]))
            {
                if (!HistoryEvents.Contains(displays[i]))
                    HistoryEvents.Add(displays[i]);
                DisplayEvents.Remove(displays[i]);
            }
            else
            {
                i++;
            }
        }
    }
    private async Task SelectTeamForMission(Mission mission)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null).ToList());
        parameters.Add(nameof(TeamPicker.CScore), mission.CScore.HasValue);
        parameters.Add(nameof(TeamPicker.MScore), mission.MScore.HasValue);
        parameters.Add(nameof(TeamPicker.SScore), mission.SScore.HasValue);
        parameters.Add(nameof(TeamPicker.KScore), mission.KScore.HasValue);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? selectedteam = result.Data as Team;
            if (selectedteam != null)
            {
                Engine.StartMission(mission, selectedteam);
            }
        }
    }
    private void StartTime() //for non-real-time
    {
        List<GameEventDisplay> displays = [];
        bool continuing = false;
        while (displays.Count == 0 && (!continuing || Engine.Settings.BypassDay1))
        {
            displays = Engine.ResolveEvents();
            continuing = true;
        }
        foreach (GameEventDisplay disp in displays)
        {
            DisplayEvents.Add(disp);
        }
        ShowEventDialog = DisplayEvents.Count > 0;
        //await ShowEvents(DisplayEvents);
    }
    private async void OnTimedEvent(Object? source, ElapsedEventArgs args) //for real time
    {
        await InvokeAsync(() => {
            DisplayEvents.AddRange(Engine.ResolveEvents());
            //ShowEvents(DisplayEvents);
            ShowEventDialog = DisplayEvents.Count > 0;
            StateHasChanged();
        });
    }
    private void CloseEventDialog()
    {
        ShowEventDialog = false;
        HistoryEvents.AddRange(DisplayEvents);
        DisplayEvents.Clear();
    }
    private Timer Timer { get; set; } = new();
    private bool ShowEventDialog { get; set; } = false;

    #region Academy functions
    private async Task AddTeamToAcademy()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.IsAtHome && e.MissionID == null).ToList());
        parameters.Add(nameof(TeamPicker.CScore), true);
        parameters.Add(nameof(TeamPicker.MScore), true);
        parameters.Add(nameof(TeamPicker.SScore), true);
        parameters.Add(nameof(TeamPicker.Teach), true);
        parameters.Add(nameof(TeamPicker.KScore), false);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? selectedteam = result.Data as Team;
            if (selectedteam != null)
            {
                Engine.Academy.AddTeam(selectedteam);
            }
        }
    }
    private void RemoveAcademyTeam(Team team)
    {
        Engine.Academy.RemoveTeam(team);
    }
    private async Task AssignInstructor(AcademyRole role)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(SoldierPicker.Soldiers), Engine.Academy.Teams.SelectMany(e => e.GetAllSoldiers.Where(f => !Engine.Academy.HeadInstructors.Values.Select(g => g?.ID ?? Guid.Empty).Contains(f.ID))).ToList());
        parameters.Add(nameof(SoldierPicker.ShowStats), true);
        parameters.Add(nameof(SoldierPicker.ShowTeach), true);
        var dialog = dialogService.Show<SoldierPicker>("Select " + role.ToString(), parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Soldier? s = result.Data as Soldier;
            if (s != null)
            {
                Engine.Academy.SetInstructor(role, s);
            }
        }
    }
    #endregion

    #region Cities
    private async Task AssignTeamToCity(ClientCity city, bool liaison)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && (e.IsAtHome || (e.Location == city.Location && !city.Liaisons.Contains(e) && liaison) || (e.Location == city.Location && !city.Teams.Contains(e) && !liaison))).ToList());
        parameters.Add(nameof(TeamPicker.CScore), true);
        parameters.Add(nameof(TeamPicker.MScore), true);
        parameters.Add(nameof(TeamPicker.SScore), true);
        parameters.Add(nameof(TeamPicker.KScore), true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? selectedteam = result.Data as Team;
            if (selectedteam != null)
            {
                if (!liaison && city.Liaisons.Contains(selectedteam))
                {
                    city.Liaisons.Remove(selectedteam);
                    city.Teams.Add(selectedteam);
                }
                else if (liaison && city.Teams.Contains(selectedteam))
                {
                    city.Teams.Remove(selectedteam);
                    city.Liaisons.Add(selectedteam);
                }
                else
                    Engine.TeamCityTravel(city, selectedteam, liaison, false);
            }
        }
    }
    private void RecallTeamFromCity(ClientCity city, Team team, bool liaison)
    {
        //maybe add confirm dialog?
        Engine.TeamCityTravel(city, team, liaison, true);
    }
    private async Task ViewCityMissions(ClientCity city)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(MissionPicker.Missions), city.Missions);
        parameters.Add(nameof(MissionPicker.RealTime), Engine.Settings.RealTime);
        parameters.Add(nameof(MissionPicker.Teams), Teams.Where(e => e.IsAtHome && e.MissionID == null).Concat(city.AllTeams.Where(e => e.MissionID == null)).ToList());
        var dialog = dialogService.Show<MissionPicker>("Missions for " + city.CityName, parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            (Mission, Team)? picked = result.Data as (Mission, Team)?;
            if (picked != null)
            {
                Mission mission = picked.Value.Item1;
                Team team = picked.Value.Item2;
                Engine.StartMission(mission, team);
                Snackbar.Add(team.TeamName + " has been sent on the mission for " + city.CityName, Severity.Info);
            }
        }
    }
    private async Task ViewCityContracts(ClientCity city)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ContractPicker.Contracts), city.Contracts);
        parameters.Add(nameof(ContractPicker.Settings), Engine.Settings);
        parameters.Add(nameof(ContractPicker.Teams), Teams.Where(e => e.IsAtHome && e.MissionID == null).Concat(city.AllTeams.Where(e => e.MissionID == null)).ToList());
        var dialog = dialogService.Show<ContractPicker>("Missions for " + city.CityName, parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            (MissionContract, Team)? picked = result.Data as (MissionContract, Team)?;
            if (picked != null)
            {
                MissionContract mission = picked.Value.Item1;
                Team team = picked.Value.Item2;
                Engine.StartContractMission(mission, team);
                Snackbar.Add(team.TeamName + " has been sent on the contract for " + city.CityName, Severity.Info);
            }
        }
    }
    private async Task ClientResources(ClientCity city)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ClientResourceDialog.City), city);
        parameters.Add(nameof(ClientResourceDialog.IncludeTeam), true);
        var dialog = dialogService.Show<ClientResourceDialog>("Missions for " + city.CityName, parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            (Team,bool)? team = result.Data as (Team,bool)?;
            if (team != null)
            {
                Engine.StartResourceRun(city, team.Value.Item1, team.Value.Item2);
            }
        }
    }
    private string MoneyAbbrev(Resources res)
    {
        string other = "";
        if (res.OtherCount > 0)
            other = " + " + res.OtherCount;
        if (res.Money < 1000)
            return $"${res.Money}{other}";
        if (res.Money < 1000000)
            return $"${res.Money/1000}K{other}";
        if (res.Money < 1000000000)
            return $"${res.Money/1000000}M{other}";
        return $"${res.Money/1000000000}B{other}";
    }
    #endregion

    #region Artifacts
    private async Task OpenArtifactDialog()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ArtifactPicker.Artifacts), Engine.Resources.Artifacts);
        var dialog = dialogService.Show<ArtifactPicker>("All Artifacts", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Artifact? artifact = result.Data as Artifact;
            if (artifact != null)
            {
                options = new DialogOptions();
                options.CloseOnEscapeKey = true;
                options.FullWidth = true;
                options.MaxWidth = MaxWidth.Large;
                parameters = new DialogParameters();
                parameters.Add(nameof(ArtifactInspector.Artifact), artifact);
                parameters.Add(nameof(ArtifactInspector.Soldiers), Engine.Soldiers.Where(e => e.Team == null || (e.Team.IsAtHome && e.Team.MissionID == null)).ToList());
                parameters.Add(nameof(ArtifactInspector.SoldierPicker), true);
                dialog = dialogService.Show<ArtifactInspector>(artifact.ArtifactName, parameters, options);
                result = await dialog.Result;
                if (result?.Canceled == false)
                {
                    Soldier? soldier = result.Data as Soldier;
                    if (soldier != null)
                    {
                        if (artifact.AssignedSoldier != null)//remove art from previous soldier
                            artifact.AssignedSoldier.Artifact = null; 
                        if (soldier.Artifact != null) //current soldier remove art
                            soldier.Artifact.AssignedSoldier = null;
                        soldier.Artifact = artifact;//new assign pt1
                        artifact.AssignedSoldier = soldier;//new assign pt2
                    }
                }
            }
        }
    }
    #endregion

    #region Defenses
    private async Task DefenseBuilds()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(BuildingDialog.Money), Engine.Resources.Money);
        parameters.Add(nameof(BuildingDialog.Structures), Engine.Defenses.Structures);
        parameters.Add(nameof(BuildingDialog.InProgress), Engine.InProgressBuildings());
        var dialog = dialogService.Show<BuildingDialog>("Buildings", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            List<DefenseType>? defenseTypes = result.Data as List<DefenseType>;
            if (defenseTypes != null)
            {
                Dictionary<DefenseType, int> adding = [];
                foreach (DefenseType type in defenseTypes)
                {
                    Engine.StartBuilding(type);
                    if (!adding.TryAdd(type,1))
                    {
                        adding[type]++;
                    }
                }
                foreach (KeyValuePair<DefenseType,int> kvp in adding)
                {
                    Snackbar.Add("Construction started on " + kvp.Value + " " + kvp.Key.ToString() + (kvp.Value == 1 ? "" : "s"), Severity.Info);
                }
            }
        }
    }
    private async Task DefenseAssign(DefenseStructure structure)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Engine.Teams.Where(e => e.IsAtHome && e.MissionID == null).ToList());
        parameters.Add(nameof(TeamPicker.AllScores), true);
        var dialog = dialogService.Show<TeamPicker>("Assign to " + structure.Type.ToString(), parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                if (structure.Team != null)
                {
                    DefenseUnassign(structure);
                }
                Engine.AssignDefense(team, structure);
            }
        }
    }
    private void DefenseUnassign(DefenseStructure structure)
    {
        Engine.UnassignDefense(structure);
    }
    private async Task OpenHealDialog(GameEventDisplay display)
    {
        if (!display.OpenHealDialog || display.DisplayTeam == null)
            return;
        Team? medic = null;
        Team? patient = null;
        List<Team> medics = Engine.Defenses.GetTeams(DefenseType.Hospital);
        if (display.DisplayTeam2 != null)
        {
            medics = [display.DisplayTeam];
            medic = display.DisplayTeam;
            patient = display.DisplayTeam2;
        }
        else
        {
            patient = display.DisplayTeam;
            if (medics.Count == 0)
            {
                Snackbar.Add("No available medics to heal at home base.", Severity.Warning);
                display.OpenHealDialog = false;
                return;
            }
            else if (medics.Count == 1)
            {
                medic = medics.FirstOrDefault();
            }
            else
            {
                var options2 = new DialogOptions();
                options2.CloseOnEscapeKey = true;
                options2.MaxWidth = MaxWidth.Large;
                var parameters2 = new DialogParameters();
                parameters2.Add(nameof(TeamPicker.AvailableTeams), medics);
                parameters2.Add(nameof(TeamPicker.KScore), true);
                var dialog2 = dialogService.Show<TeamPicker>("Assign Medics", parameters2, options2);
                var result2 = await dialog2.Result;
                if (result2?.Canceled == false)
                {
                    if (result2.Data is Team team)
                    {
                        medic = team;
                    }
                }
            }
        }
        if (medic == null)
        {
            Snackbar.Add("No healing selected for Team " + display.DisplayTeam.TeamName + ".", Severity.Warning);
            return;
        }
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(HealDialog.PatientTeam), patient);
        parameters.Add(nameof(HealDialog.MedicTeam), medic);
        var dialog = dialogService.Show<HealDialog>("Healing for Team " + (patient.TeamName), parameters, options);
        var result = await dialog.Result;
        display.OpenHealDialog = false;
    }
    private async Task OpenRescueDialog(GameEventDisplay display)
    {
        if (display.DisplayTeam == null || display.DisplayMission == null)
        {
            display.OpenRescueDialog = false;
            return;
        }
        if (!Engine.Teams.Any(e => e.IsAtHome && e.MissionID == null && e.KScore > 0) && !display.DisplayMission.Client.AvailableTeams.Any(e => e.MissionID == null && e.KScore > 0))
        {
            Snackbar.Add("No teams are available to rescue Team " + display.DisplayTeam.TeamName + ".", Severity.Warning);
            display.OpenRescueDialog = false;
            return;
        }
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Small;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ConfirmDialog.Text), $"Do you want to send a rescue team to help Team " + display.DisplayTeam.TeamName + "?");
        parameters.Add(nameof(ConfirmDialog.Button), "Yes, Send");
        parameters.Add(nameof(ConfirmDialog.ButtonColor), Color.Info);
        var dialog = dialogService.Show<ConfirmDialog>("Confirm Removal", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == true)
        {
            display.OpenRescueDialog = false;
            return;
        }
        MapLocation midpoint = display.DisplayMission.Location!.GetMidpoint(display.DisplayTeam.Location!);
        var options2 = new DialogOptions();
        options2.CloseOnEscapeKey = true;
        options2.MaxWidth = MaxWidth.Medium;
        var parameters2 = new DialogParameters();
        parameters2.Add(nameof(RescueTeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && e.KScore > 0).ToList());
        parameters2.Add(nameof(RescueTeamPicker.Rescuee), display.DisplayTeam);
        parameters2.Add(nameof(RescueTeamPicker.Location), display.DisplayMission.Location!);
        var dialog2 = dialogService.Show<RescueTeamPicker>("Select Team", parameters2, options2);
        var result2 = await dialog2.Result;
        if (result2?.Canceled == false)
        {
            Team? rescue = result2.Data as Team;
            if (rescue != null)
            {
                Engine.StartRescueMission(rescue, display.DisplayTeam, midpoint);
            }
        }
        display.OpenRescueDialog = false;
    }
    #endregion

    #region Training
    private async Task StartLeadership()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && e.IsAtHome && e.Leaders.Count > 0).ToList());
        parameters.Add(nameof(TeamPicker.AllScores), true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            if (result.Data is Team team)
            {
                Soldier? leader = null;
                if (team.Leaders.Count == 1)
                {
                    leader = team.Leaders.FirstOrDefault();
                }
                else
                {
                    options = new DialogOptions();
                    options.CloseOnEscapeKey = true;
                    options.MaxWidth = MaxWidth.Large;
                    parameters = new DialogParameters();
                    parameters.Add(nameof(SoldierPicker.Soldiers), team.Leaders);
                    parameters.Add(nameof(SoldierPicker.ShowStats), true);
                    dialog = dialogService.Show<SoldierPicker>("Select leader to conduct training", parameters, options);
                    result = await dialog.Result;
                    if (result?.Canceled == false)
                    {
                        if (result.Data != null)
                        {
                            leader = result.Data as Soldier;
                        }
                    }
                }
                if (leader != null)
                {
                    Engine.StartTrainingMission(team, leader);
                }
            }
        }
    }
    private async Task LeadershipDialog()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(LeadershipCensus.Soldiers), Engine.Soldiers.Where(e => !e.IsLeading).ToList());
        var dialog = dialogService.Show<LeadershipCensus>("Potential Leaders", parameters, options);
        var result = await dialog.Result;
    }
    private async Task NewMedicDialog()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(HealCensus.Soldiers), Engine.Soldiers.Where(e => e.Medical?.Assessed == true && e.Medical?.Trained == false).ToList());
        var dialog = dialogService.Show<HealCensus>("Potential Medics", parameters, options);
        var result = await dialog.Result;
    }
    private async Task StartMedicTraining()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && e.IsAtHome && e.GetAllSoldiers.Any(f => ((f.PowerLevel >= 500 && f.Medical?.Assessed == false) || (f.Medical?.CanTrain == true)) && (f.HealScore.HasValue))).ToList());
        parameters.Add(nameof(TeamPicker.KScore), true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                options = new DialogOptions();
                options.CloseOnEscapeKey = true;
                options.MaxWidth = MaxWidth.Large;
                parameters = new DialogParameters();
                parameters.Add(nameof(SoldierPicker.Soldiers), team.GetAllSoldiers.Where(e => e.HealScore.HasValue).ToList());
                parameters.Add(nameof(SoldierPicker.ShowMedic), true);
                parameters.Add(nameof(SoldierPicker.ShowTeach), true);
                dialog = dialogService.Show<SoldierPicker>("Select Attending", parameters, options);
                result = await dialog.Result;
                if (result?.Canceled == false)
                {
                    Soldier? medic = result.Data as Soldier;
                    if (medic != null)
                        Engine.StartMedTrainMission(team, medic);
                }
            } 
        }
    }
    #endregion

    #region Research
    private async Task CreateFacility()
    {
        Engine.Research.AddFacility();
    }
    private async Task UpgradeFacility(ResearchFacility facility)
    {
        //dummy for the moment
        facility.NumTeams++;
        //spend money, confirm dialog?
    }
    private async Task CreateProject(ResearchFacility facility)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(ColorPicker.AvailableColors), Engine.Research.AvailableColors.ToList());
        var dialog = dialogService.Show<ColorPicker>("Select Color", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            MagicColor? color = result.Data as MagicColor?;
            if (color != null)
                Engine.Research.StartProject(facility, color.Value);
        }
    }
    private async Task ManageFacility(ResearchFacility facility)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraLarge;
        var parameters = new DialogParameters();
        parameters.Add(nameof(FacilityDialog.Facility), facility);
        parameters.Add(nameof(FacilityDialog.AvailableColors), Engine.Research.AvailableColors);
        parameters.Add(nameof(FacilityDialog.AvailableTeams), Engine.Teams.Where(e => e.IsAtHome && e.MissionID == null && e.Leaders.Count > 0).ToList());
        var dialog = dialogService.Show<FacilityDialog>("Select Team", parameters, options);
        var result = await dialog.Result;
    }
    private async Task ViewSpell(Spell spell)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(SpellInspector.Spell), spell);
        var dialog = dialogService.Show<SpellInspector>(spell.SpellName, parameters, options);
        var result = await dialog.Result;
    }
    private async Task StartCastSpell(Spell spell)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(TeamPicker.AvailableTeams), Engine.Research.GetAvailableTeams.Where(e => !spell.SpellCaster || e.GetAllSoldiers.Any(f => spell.CanCast(f))).ToList());
        parameters.Add(nameof(TeamPicker.MScore), true);
        var dialog = dialogService.Show<TeamPicker>("Select Casting Team ", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                ResearchFacility? facility = Engine.Research.Facilities.FirstOrDefault(e => e.ID == team.MissionID);
                if (facility != null)
                {
                    int? amount = null;
                    Soldier? caster = null;
                    Soldier? target = null;
                    bool proceed = true;
                    if (spell.SpellCaster)
                    {
                        options = new DialogOptions();
                        options.CloseOnEscapeKey = true;
                        options.MaxWidth = MaxWidth.Large;
                        parameters = new DialogParameters();
                        parameters.Add(nameof(SoldierPicker.Soldiers), team.GetAllSoldiers.Where(e => spell.CanCast(e)).ToList());
                        parameters.Add(nameof(SoldierPicker.ShowStats), true);
                        dialog = dialogService.Show<SoldierPicker>("Select Caster", parameters, options);
                        result = await dialog.Result;
                        if (result?.Canceled == false)
                        {
                            caster = result.Data as Soldier;
                        }
                        proceed = caster != null;
                    }
                    if (proceed && spell.CastQuantity)
                    {
                        options = new DialogOptions();
                        options.CloseOnEscapeKey = true;
                        options.MaxWidth = MaxWidth.Large;
                        parameters = new DialogParameters();
                        parameters.Add(nameof(NumberPicker.Label), "Enter number of casts to perform.");
                        parameters.Add(nameof(NumberPicker.Max), spell.CastLimit(Engine.Resources.Money));
                        dialog = dialogService.Show<NumberPicker>("Spell Quantity ", parameters, options);
                        result = await dialog.Result;
                        if (result?.Canceled == false)
                        {
                            amount = result.Data as int?;
                        }
                        proceed = amount.HasValue;
                    }
                    if (proceed && spell.TargetSoldier)
                    {
                        options = new DialogOptions();
                        options.CloseOnEscapeKey = true;
                        options.MaxWidth = MaxWidth.Large;
                        parameters = new DialogParameters();
                        parameters.Add(nameof(SoldierPicker.Soldiers), Engine.Soldiers.Where(e => (e.Team == null || e.Team.MissionID == null) && spell.EligibleTarget(e)).ToList());
                        parameters.Add(nameof(SoldierPicker.ShowStats), true);
                        dialog = dialogService.Show<SoldierPicker>("Select Caster", parameters, options);
                        result = await dialog.Result;
                        if (result?.Canceled == false)
                        {
                            target = result.Data as Soldier;
                        }
                        proceed = target != null;
                    }
                    if (proceed)
                    {
                        facility.StartCastSpell(team, spell, caster, target, amount);
                    }
                }
            }
        }
    }
    private async Task SetThreshold(ResearchFacility facility)
    {
        if (facility.Project == null)
            return;
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Small;
        var parameters = new DialogParameters();
        parameters.Add(nameof(DropDownNumbersDialog.AvailableNumbers), ResearchProject.Thresholds.Where(e => facility.Project.AvailableThresholds.Contains(e.Item2)).ToList());
        parameters.Add(nameof(DropDownNumbersDialog.Text), "Select a target scope for the research project.");
        parameters.Add(nameof(DropDownNumbersDialog.Color), facility.Project.GetColor.Color());
        var dialog = dialogService.Show<DropDownNumbersDialog>("Select a new target", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            int? newthresh = result.Data as int?;
            if (newthresh != null)
            {
                if (newthresh.Value != facility.Project.CurrentThreshold)
                {
                    bool proceed = true;
                    if (facility.Project.WarnBeforeChange)
                    {
                        options = new DialogOptions();
                        options.CloseOnEscapeKey = true;
                        options.MaxWidth = MaxWidth.Small;
                        parameters = new DialogParameters();
                        parameters.Add(nameof(ConfirmDialog.Color), Color.Error);
                        parameters.Add(nameof(ConfirmDialog.Text), "Changing the research target will erase current progress.  Continue?");
                        parameters.Add(nameof(ConfirmDialog.ButtonColor), Color.Error);
                        parameters.Add(nameof(ConfirmDialog.Button), "Yes, Continue");
                        dialog = dialogService.Show<DropDownNumbersDialog>("Warning", parameters, options);
                        result = await dialog.Result;
                        proceed = result?.Canceled == false;
                    }
                    if (proceed)
                    {
                        facility.Project.SetThreshold(newthresh.Value);
                    }
                }
            }
        }
    }
    #endregion

    private async Task ViewPower(Soldier soldier)
    {
        if (soldier.Power == null)
            return;
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(PowerInspectorDialog.Power), soldier.Power);
        parameters.Add(nameof(PowerInspectorDialog.Powerlevel), soldier.PowerLevel);
        var dialog = dialogService.Show<PowerInspectorDialog>(soldier.Power.PowerName, parameters, options);
        var result = await dialog.Result;
    }
    private async Task ViewPower(IPower power)
    {
        if (power == null)
            return;
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(PowerInspectorDialog.Power), power);
        parameters.Add(nameof(PowerInspectorDialog.Powerlevel), null);
        var dialog = dialogService.Show<PowerInspectorDialog>(power.PowerName, parameters, options);
        var result = await dialog.Result;
    }
    private async Task StartHuntMission(Spell spell)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        if (spell.BeastPet != null)
            parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && e.EligibleToHunt()).ToList());
        else if (spell.Beast != null)
            parameters.Add(nameof(TeamPicker.AvailableTeams), Teams.Where(e => e.MissionID == null && e.EligibleToHunt(spell.Beast)).ToList());
        parameters.Add(nameof(TeamPicker.CScore), true);
        parameters.Add(nameof(TeamPicker.MScore), true);
        parameters.Add(nameof(TeamPicker.SScore), true);
        var dialog = dialogService.Show<TeamPicker>("Attempt to tame the " + spell.BeastName, parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                Soldier? target = null;
                bool proceed = true;
                if (spell.Beast != null)
                {
                    options = new DialogOptions();
                    options.CloseOnEscapeKey = true;
                    options.MaxWidth = MaxWidth.Large;
                    parameters = new DialogParameters();
                    parameters.Add(nameof(SoldierPicker.Soldiers), team.GetAllSoldiers.Where(e => spell.Beast.IsEligible(e)).ToList());
                    parameters.Add(nameof(SoldierPicker.ShowStats), true);
                    dialog = dialogService.Show<SoldierPicker>("Attempt to tame the " + spell.BeastName, parameters, options);
                    result = await dialog.Result;
                    if (result?.Canceled == false)
                        target = result.Data as Soldier;
                    else
                        proceed = false;
                }
                if (proceed)
                {
                    Engine.StartHunt(team, spell, target);
                }
            }
        }
    }
    private async Task ViewBeast(Beast beast)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        parameters.Add(nameof(BeastInspectorDialog.Beast), beast);
        var dialog = dialogService.Show<BeastInspectorDialog>(beast.BeastName, parameters, options);
        var result = await dialog.Result;
    }
    private async Task ViewPet(BeastPet pet)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.Large;
        var parameters = new DialogParameters();
        Soldier soldier = pet.GenerateSoldier();
        parameters.Add(nameof(SoldierInspectorDialog.Soldier), soldier);
        var dialog = dialogService.Show<SoldierInspectorDialog>(pet.BeastName, parameters, options);
        var result = await dialog.Result;
    }
}
