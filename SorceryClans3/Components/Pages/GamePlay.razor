@page "/play"
@namespace SorceryClans3.Components.Pages
@using System.Timers
@using SorceryClans3.Data.Users
@using SorceryClans3.Components.Pages.Dialogs
@inject IDialogService dialogService

<MudTabs Position="Position.Left" Color="Color.Info">
    <MudTabPanel Text="Live">
        <MudStack>
            <MudToggleIconButton @bind-Toggled="Engine.Settings.RealTime" Icon="@Icons.Material.TwoTone.LockClock" Color="Color.Info"
                ToggledIcon="@Icons.Material.TwoTone.Timer" ToggledColor="Color.Primary" Disabled="Started" />
            @if (!Started)
            {
                <MudButton OnClick="Start">Start Game</MudButton>
            }
            else
            {
                <MudText>@Engine.Settings.CurrentTime.ToString(DTFormat)</MudText>
                @if (!Engine.Settings.RealTime)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="StartTime">Advance Time</MudButton>
                }
            }
            <MudSimpleTable Striped Bordered>
                <thead>
                    <tr>
                        <th>Event</th>
                        <th>Remaining</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (GameEvent gameEvent in Engine.VisibleEvents)
                    {
                        <tr>
                            <td>@gameEvent.Type.ToString()</td>
                            <td>
                                @if (gameEvent.FixedDate)
                                {
                                    @(gameEvent.EventCompleted.Subtract(Engine.Settings.CurrentTime).ToString(TSFormat) + (Engine.Settings.RealTime ? "" : " days"))
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
            <MudExpansionPanels>
                <MudExpansionPanel Text="History">
                    <MudSimpleTable Striped Bordered>
                        <thead>
                            <tr>
                                <th>Event</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (GameEventDisplay gameEvent in HistoryEvents)
                            {
                                <tr>
                                    <td>@gameEvent.DisplayText</td>
                                    <td>
                                        @gameEvent.EventDate.ToString(DTFormat)
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Clans">
        <MudTable Items="Clans" Striped Outlined>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Lvl</MudTh>
                <MudTh>Stats</MudTh>
                <MudTh>Power</MudTh>
                <MudTh># Soldiers</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ClanName</MudTd>
                <MudTd>@context.EliteLevel</MudTd>
                <MudTd>@context.DisplayStats</MudTd>
                <MudTd>@context.Power?.PowerName</MudTd>
                <MudTd>@Soldiers.Count(e => e.ClanID == context.ID)</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Soldiers">
        <MudTable Items="Soldiers" Striped Outlined>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Lvl</MudTh>
                <MudTh>Stats</MudTh>
                <MudTh>Leader</MudTh>
                <MudTh>Power</MudTh>
                <MudTh>Artifact</MudTh>
                <MudTh>Team</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.SoldierName</MudTd>
                <MudTd>@context.PowerLevel</MudTd>
                <MudTd></MudTd>
                <MudTd></MudTd>
                <MudTd>@context.Power?.PowerName</MudTd>
                <MudTd>@context.Artifact?.ArtifactName</MudTd>
                <MudTd>@context.Team?.TeamName</MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Teams">
        <MudStack>

            @if (Soldiers.Count(e => e.Team == null) > 0)
            {
                <MudButton OnClick="CreateTeam" Variant="Variant.Filled" Color="Color.Info">Create New Team</MudButton>
            }
            <MudTable Items="Teams">
                <HeaderContent>
                    <MudTh>Team Name</MudTh>
                    <MudTh>Com</MudTh>
                    <MudTh>Mag</MudTh>
                    <MudTh>Sub</MudTh>
                    <MudTh>Heal</MudTh>
                    <MudTh># Soldiers</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.TeamName</MudTd>
                    <MudTd>@context.CScore</MudTd>
                    <MudTd>@context.MScore</MudTd>
                    <MudTd>@context.SScore</MudTd>
                    <MudTd>@context.KScore</MudTd>
                    <MudTd>@context.SoldierCount</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.TwoTone.ManageAccounts" Color="Color.Info" OnClick="() => ManageTeam(context)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Assignments"></MudTabPanel>
    <MudTabPanel Text="Missions">
        <MudTable Items="Missions">
            <HeaderContent>
                <MudTh>CReq</MudTh>
                <MudTh>MReq</MudTh>
                <MudTh>SReq</MudTh>
                <MudTh>KReq</MudTh>
                <MudTh>$</MudTh>
                <MudTh>Distance</MudTh>
                <MudTh>Time</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.CDisp</MudTd>
                <MudTd>@context.MDisp</MudTd>
                <MudTd>@context.SDisp</MudTd>
                <MudTd>@context.KDisp</MudTd>
                <MudTd>@context.MoneyReward</MudTd>
                <MudTd>@context.TravelDistance</MudTd>
                <MudTd>@context.MissionDays</MudTd>
                <MudTd>
                    @if (context.AttemptingTeam != null)
                    {
                        <MudIcon Icon="@Icons.Material.TwoTone.Group" Color="Color.Default" />
                    }
                    else
                    {
                        <MudIconButton Icon="@Icons.Material.TwoTone.GroupAdd" Color="Color.Info" OnClick="() => SelectTeamForMission(context)" />
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Resources"></MudTabPanel>
    <MudTabPanel Text="Defenses"></MudTabPanel>
</MudTabs>

<MudDialog @bind-Visible="ShowEventDialog" Options="new DialogOptions() { CloseOnEscapeKey=false, BackdropClick=false, FullWidth=true, MaxWidth=MaxWidth.ExtraLarge }">
    <DialogContent>
        <MudSimpleTable Striped Bordered>
            <tbody>
                @foreach (GameEventDisplay display in DisplayEvents)
                {
                    <tr>
                        <td>@display.DisplayText</td>
                    </tr>
                    @if (display.DisplayMission != null || display.DisplayTeam != null)
                    {
                        <tr>
                            <td>
                                @display.DisplayMission?.MoneyReward?.ToString("C")
                                @display.DisplayTeam?.TeamName
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" OnClick="CloseEventDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public Auth0User? User { get; set; }
    private List<Clan> Clans { get { return Engine.Clans; } }
    private List<Soldier> Soldiers { get { return Engine.Soldiers; } }
    private List<Team> Teams { get { return Engine.Teams; } }
    private List<Mission> Missions { get { return Engine.Missions; } }
    private GameEngine Engine { get; set; } = new();
    private List<GameEventDisplay> DisplayEvents { get; set; } = [];
    private List<GameEventDisplay> HistoryEvents { get; set; } = [];
    private string TSFormat
    {
        get
        {
            if (Engine.Settings.RealTime)
                return @"hh\:mm\:ss"; //return @"hh\:mm\:ss\:ff";
            return "%d";
        }
    }
    private string DTFormat
    {
        get
        {
            if (Engine.Settings.RealTime)
                return @"MM/dd/yy hh\:mm tt";
            return "MMM d, Year y";
        }
    }
    protected override void OnInitialized()
    {
        Timer = new Timer(500);
        Timer.Elapsed += OnTimedEvent;
        Random r = new Random();
        int x = 3;
        for (int i = 0; i < 3; i++)
        {
            Clan clan = new Clan(x);
            Engine.Clans.Add(clan);
            for (int j = 0; j < r.Next(3)+3; j++)
            {
                Soldier soldier = new Soldier(clan);
                if (r.Next(2) == 0 && r.Next(soldier.PowerLevel) > 1000)
                {
                    soldier.CreateHealer();
                    soldier.Medical!.MedicalPowerBase = r.Next(soldier.Medical.HealBase*10);
                }
                Engine.Soldiers.Add(soldier);
            }
            x = 1;
        }
        for (int i = 20; i < 30 + r.Next(10); i++)
        {
            Engine.Missions.Add(new Mission(2000+r.Next(10000), nocolor:true));
        }
    }
    private async Task CreateTeam()
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.MaxWidth = MaxWidth.ExtraExtraLarge;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add("Soldiers", Soldiers.Where(e => e.Team == null).ToList());
        var dialog = dialogService.Show<SoldierTeamPicker>("Select Soldiers", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? newteam = result.Data as Team;
            if (newteam != null)
            {
                foreach (Soldier soldier in newteam.Soldiers)
                {
                    soldier.Team = newteam;
                }
                Engine.Teams.Add(newteam);
            }
        }
    }
    private async Task ManageTeam(Team team)
    {
        //change to leader, inspect, anything else?
    }
    private bool RealTime { get; set; } = false;
    private bool Started { get; set; } = false;
    private void Start()
    {
        Started = true;
        if (Engine.Settings.RealTime)
            Timer.Enabled = true;
    }
    private async Task ShowEvents(List<GameEventDisplay> displays)
    {
        if (displays.Count == 0)
            return;
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add("DisplayEvents", displays);
        var dialog = dialogService.Show<DisplayEventDialog>("View Events", parameters, options);
        var result = await dialog.Result;
        int i = 0;
        while (i < displays.Count)
        {
            if (DisplayEvents.Contains(displays[i]))
            {
                if (!HistoryEvents.Contains(displays[i]))
                    HistoryEvents.Add(displays[i]);
                DisplayEvents.Remove(displays[i]);
            }
            else
            {
                i++;
            }
        }
    }
    private async Task SelectTeamForMission(Mission mission)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        options.FullWidth = true;
        var parameters = new DialogParameters();
        parameters.Add("AvailableTeams", Teams.Where(e => e.MissionID == null).ToList());
        parameters.Add("CScore", mission.CScore.HasValue);
        parameters.Add("MScore", mission.MScore.HasValue);
        parameters.Add("SScore", mission.SScore.HasValue);
        parameters.Add("KScore", mission.KScore.HasValue);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false)
        {
            Team? selectedteam = result.Data as Team;
            if (selectedteam != null)
            {
                Engine.StartMission(mission, selectedteam);
            }
        }
    }
    private async Task StartTime() //for non-real-time
    {
        List<GameEventDisplay> displays = [];
        bool continuing = false;
        while (displays.Count == 0 && (!continuing || Engine.Settings.GameTime.Day > 1))
        {
            displays = Engine.ResolveEvents();
            continuing = true;
        }
        foreach (GameEventDisplay disp in displays)
        {
            DisplayEvents.Add(disp);
        }
        ShowEventDialog = DisplayEvents.Count > 0;
        //await ShowEvents(DisplayEvents);
    }

    private async void OnTimedEvent(Object? source, ElapsedEventArgs args)
    {
        await InvokeAsync(() => {
            DisplayEvents.AddRange(Engine.ResolveEvents());
            //ShowEvents(DisplayEvents);
            ShowEventDialog = DisplayEvents.Count > 0;
            StateHasChanged();
        });
    }
    private void CloseEventDialog()
    {
        ShowEventDialog = false;
        HistoryEvents.AddRange(DisplayEvents);
        DisplayEvents.Clear();
    }
    private Timer Timer { get; set; }
    private bool ShowEventDialog { get; set; } = false;
}
