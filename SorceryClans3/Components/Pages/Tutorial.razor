@page "/tutorial"
@namespace SorceryClans3.Components.Pages
@using SorceryClans3.Components.Pages.Dialogs
@using SorceryClans3.Data.Abstractions
@using SorceryClans3.Components
@using System.Timers
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject IDialogService dialogService

<MudExpansionPanels MultiExpansion=true>
    <MudExpansionPanel IsInitiallyExpanded=true>
        <TitleContent>
                <MudText>Clan</MudText>
        </TitleContent>
        <ChildContent>
            <MudStack Row=true>
                <MudSelect @bind-Value="SelectedColor" T="MagicColor?" Clearable=true Label="Magic Color" Style="width: 100px;">
                    @foreach (ColorPicker picker in ColorOptions)
                    {
                        <MudSelectItem T="MagicColor?" Value="@picker.Color">@picker.Description</MudSelectItem>
                    }
                </MudSelect>
                <MudRadioGroup @bind-Value="ClanLevel">
                    <MudRadio Value="0">Civilian</MudRadio>
                    <MudRadio Value="1">Average</MudRadio>
                    <MudRadio Value="2">Strong</MudRadio>
                    <MudRadio Value="3">Elite</MudRadio>
                </MudRadioGroup>
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="NewClan">New Clan</MudButton>
            </MudStack>
            <MudStack Row=true>
            <MudTextField Label="Clan Name" @bind-Value="Clan.ClanName" />
            <MudNumericField Label="Combat" @bind-Value="Clan.ComElite" />
            <MudNumericField Label="Magic" @bind-Value="Clan.MagElite" />
            <MudNumericField Label="Subtlety" @bind-Value="Clan.SubElite" />
            <MudNumericField Label="HP" @bind-Value="Clan.HPElite" />
            <MudNumericField Label="Heal" @bind-Value="Clan.HealElite" />
            @if (Clan.Power != null)
            {
                <MudIconButton Icon="@Clan.Power.Icon" Title="@Clan.Power.PowerName" Color="Clan.Power.IconColor" OnClick="ViewPower" />
            }
            @if (Clan.Style != null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.FrontHand" Color="Color.Secondary" OnClick="ViewStyle" />
            }
        </MudStack>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel IsInitiallyExpanded=true>
        <TitleContent>
            <MudStack Row=true>
                <MudText>@Soldier.SoldierName</MudText>
                <MudSpacer />
                <MudButton OnClick="NewSold" Variant="Variant.Filled" Color="Color.Info">New Soldier</MudButton>
            </MudStack>
        </TitleContent>
        <ChildContent>
            <MudStack Row=true>
                <MudTextField Label="Name" @bind-Value="Soldier.GivenName" />
                <MudNumericField Label="Combat" Disabled=true Value="Soldier.Combat" />
                <MudNumericField Label="Magic" Disabled=true Value="Soldier.Magic" />
                <MudNumericField Label="Subtlety" Disabled=true Value="Soldier.Subtlety" />
                <MudNumericField Label="HP Max" Disabled=true Value="Soldier.HPMax" />
                <MudNumericField Label="Travel" Disabled=true Value="Soldier.Travel" />
                <MudIconButton Icon="@Icons.Material.Filled.HealthAndSafety" Color="Color.Error" Disabled="Soldier.Medical!.Assessed || Soldier.PowerLevel < 500" OnClick="MakeHealer" />
            </MudStack>
            <MudStack Row=true>
                <MudNumericField Label="Power Level" Min="0" @bind-Value="Soldier.PowerLevel" />
                <MudNumericField Label="Combat Base" Min="Clan.ComElite" Max="Clan.ComElite+10" @bind-Value="Soldier.ComBase" />
                <MudNumericField Label="Magic Base" Min="Clan.MagElite" Max="Clan.MagElite+10" @bind-Value="Soldier.MagBase" />
                <MudNumericField Label="Subtlety Base" Min="Clan.SubElite" Max="Clan.SubElite+10" @bind-Value="Soldier.SubBase" />
                <MudNumericField Label="HP Base" Min="3" @bind-Value="Soldier.HPBase" />
                <MudNumericField Label="Travel Base" @bind-Value="Soldier.TravelBase" />
                @if (Soldier.Power != null)
                {
                    <MudIconButton Icon="@Soldier.Power.Icon" Title="@Soldier.Power.PowerName" Color="Soldier.Power.IconColor" OnClick="() => SoldierPower(Soldier)" />
                }
                @if (Soldier.Artifact != null)
                {
                    <MudIconButton Icon="@Soldier.Artifact.Icon" Title="@Soldier.Artifact.ArtifactName" Color="Color.Primary" OnClick="() => ViewArtifact(Soldier.Artifact)" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Title="Create Artifact" Color="Color.Secondary" OnClick="CreateArtifact" />
                }
                @if (Soldier.IsLeading == true)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Groups" Color="Color.Info" OnClick="() => ViewLeadership(Soldier)" />
                }
                else if (Soldier.PowerLevel >= 2500)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" Color="Color.Info" OnClick="() => CreateLeadership(Soldier)" />
                }
            </MudStack>
            @if (Soldier.Medical != null && Soldier.Medical.Trained)
            {
                <MudStack Row=true>
                    <MudText>Medical ability:</MudText>
                    <MudNumericField Label="Heal" Disabled=true Value="Soldier.Heal" />
                    <MudNumericField Label="Base Heal" @bind-Value="Soldier.Medical.HealBase" Min="Clan.HealElite" Max="Clan.HealElite+10" />
                    <MudNumericField Label="Healing Power" @bind-Value="Soldier.Medical.MedicalPowerBase" Min="0" Max="@(Soldier.HealBase > 10 ? 100 : Soldier.HealBase*10)" />
                    <MudNumericField Label="Fatigue" @bind-Value="Soldier.Medical.MedicFatigue" Min="0" />
                </MudStack>
            }
            @if (Soldier.IsLeading)
            {
                <MudStack Row=true>
                    <MudNumericField Label="Experience" @bind-Value="Soldier.LeadershipXP" T="double" Step=".1" />
                    <MudNumericField Label="Charisma" @bind-Value="Soldier.CharismaBase" Min="0" Max="10" Step="1" />
                    <MudNumericField Label="Logistics" @bind-Value="Soldier.LogisticsBase" Min="0" Max="10" Step="1" />
                    <MudNumericField Label="Tactics" @bind-Value="Soldier.TacticsBase" Min="0" Max="10" Step="1" />
                    <MudCheckBox @bind-Value="Soldier.IsLeading">Leadership</MudCheckBox>
                </MudStack>
            }
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText>Team</MudText>
        </TitleContent>
        <ChildContent>
            <MudStack Row=true>
                <MudTextField Label="Team Name" @bind-Value="Team.TeamName" />
                <MudText># Soldiers: @Team.SoldierCount</MudText>
                <MudText>COM: @Team.CScore</MudText>
                <MudText>MAG: @Team.MScore</MudText>
                <MudText>SUB: @Team.SScore</MudText>
                <MudText>HEAL: @Team.KScore</MudText>
                <MudText>TRAVEL: @Team.DScore</MudText>
                <MudText>LEAD: @Team.LeadText</MudText>
                <MudSpacer />
                <MudButton OnClick="AddSoldier" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add">Add Soldier</MudButton>
                <MudButton OnClick="AddLeader" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" Disabled="!Soldier.IsLeading">Add Leader</MudButton>
                <MudButton OnClick="AddTeam" Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.GroupAdd">Add Team</MudButton>
            </MudStack>
            <MudSimpleTable Striped Bordered Outlined>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Power</th>
                    <th>Combat</th>
                    <th>Magic</th>
                    <th>Subtlety</th>
                    <th>HP</th>
                    <th>Heal</th>
                    <th>Power</th>
                    <th>Artifact</th>
                    <th>Leadership</th>
                </tr>
            </thead>
            <tbody>
                <TeamSoldierInspector Soldiers="Team.Leaders" />
                @if (Team.Leaders.Count > 0)
                {
                    <tr>
                        <td colspan="10"><hr /></td>
                    </tr>
                }
                <TeamSoldierInspector Soldiers="Team.Soldiers" />
                @if (Team.GetColors.Count > 0)
                {
                    <tr>
                        <td colspan="10">
                            <MudStack Row=true>
                                Team Magic:
                                <MagicIcons Colors="Team.GetColors" />
                            </MudStack>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText>Missions</MudText>
        </TitleContent>
        <ChildContent>
            <MudStack Row=true>
                <MudButton OnClick="IncrementDay" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.SkipNext">Advance to new day</MudButton>
                <MudNumericField @bind-Value="NumDays" Min="1" Label="# Days" />
            </MudStack>
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Mercenary">
                    <MudStack Row=true>
                        <MudSelect @bind-Value="SelectedTeam" Clearable=true T="Team">
                            @foreach (Team team in Teams)
                            {
                                <MudSelectItem Value="team">@team.TeamName</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AttemptMission" Disabled="SelectedTeam == null">Attempt (static)</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="AddRunningMission" Disabled="SelectedTeam == null">Attempt (real time)</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="RegenMission">New Mission</MudButton>
                        <MudNumericField @bind-Value="MissionSeed" Min="0" Max="1000000" Label="Difficulty" />
                    </MudStack>
                    <MissionInspector Mission="Mission" />
                    <MudSimpleTable Striped Bordered>
                        <thead>
                            <tr>
                                <th>Mission</th>
                                <th>Remaining Time</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (RunningMission mission in RunningMissions)
                            {
                                <tr>
                                    <td>@mission.MissionName</td>
                                    <td>@mission.RemainingTime</td>
                                    <td></td>
                                </tr>
                            }
                            @foreach (RunningMission mission in FinishedMissions)
                            {
                                <tr>
                                    <td>@mission.MissionName</td>
                                    <td>@mission.RemainingTime</td>
                                    <td>
                                        <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.RemoveRedEye" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                        
                </MudExpansionPanel>
                <MudExpansionPanel Text="Research">
                    <MudStack Row=true>
                        <MudButton OnClick="AddFacility" Color="Color.Info" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">Add Facility</MudButton>
                        <MudSelect @bind-Value="SelectedColor2" T="MagicColor?" Label="New Project Color">
                            @foreach (MagicColor color in Research.AvailableColors)
                            {
                                <MudSelectItem T="MagicColor?" Value="color">@color.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                    <div class="d-flex flex-wrap">
                        @foreach (ResearchFacility facility in Research.Facilities)
                        {
                            <MudCard Style="border-style: ridge; width: 250px; border-radius: 5px; margin: 3px;" Elevation="2">
                                <MudCardHeader>@facility.Project?.Progress</MudCardHeader>
                                <MudCardContent>
                                    <MudStack Row=true>
                                        <MudText Color="@(facility.Project?.GetColor.Color() ?? Color.Default)">@facility.DisplayInfo</MudText>
                                        @if (facility.Project != null)
                                        {
                                            <MudStack>
                                                <MudIconButton OnClick="() => ViewProject(facility.Project)" Color="Color.Info" Icon="@Icons.Material.Filled.RemoveRedEye" />
                                                @if (facility.NumTeams < facility.Project.CurrentThreshold * 2)
                                                {
                                                    <MudIconButton OnClick="() => Increment(facility)" Color="Color.Success" Icon="@Icons.Material.Filled.ExposurePlus1" />
                                                }
                                                @if (facility.NumTeams > facility.Project.TeamIDs.Count)
                                                {
                                                    <MudIconButton OnClick="() => StartAddTeamToProject(facility.Project)" Color="Color.Info" Icon="@Icons.Material.Filled.GroupAdd" />
                                                }
                                                else
                                                {
                                                    <MudTooltip Text="All work spaces occupied">
                                                        <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.Groups" />
                                                    </MudTooltip>
                                                }
                                            </MudStack>
                                        }
                                    </MudStack>
                                    @if (facility.Project == null)
                                    {
                                        <MudButton OnClick="() => CreateProject(facility)" Variant="Variant.Filled" Color="Color.Info">Create Project</MudButton>
                                    }
                                    else
                                    {
                                        <MudSelect @bind-Value="@facility.Project.CurrentThreshold" Label="Level">
                                            @foreach (int lvl in facility.Project.AvailableThresholds)
                                            {
                                                <MudSelectItem Value="lvl">@lvl.ToString()</MudSelectItem>
                                            }
                                        </MudSelect>
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                    </div>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Taming">
                    <div class="d-flex flex-wrap">
                        @foreach (Spell spell in Research.Spells.Where(e => e.Beast != null))
                        {
                            <MudCard Style="border-style: ridge; width: 250px; border-radius: 5px; margin: 3px;" Elevation="2">
                                <MudCardHeader>@spell.Beast!.FullName</MudCardHeader>
                                <MudCardContent>
                                    <MissionInspector Mission="@spell.Beast!.GetMission" />
                                </MudCardContent>
                                <MudCardActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="() => BeastView(spell.Beast!)" Color="Color.Info" />
                                    <MudIconButton Icon="@Icons.Material.Filled.MenuBook" OnClick="() => BeastCast(spell)" Color="Color.Info" />
                                        @*Disabled="!(AvailableTeams.Any(e => e.GetAllSoldiers.Any(f => spell.Beast!.IsEligible(f))) && spell.Consumables > 0)" />*@
                                </MudCardActions>
                            </MudCard>
                        }
                    </div>
                </MudExpansionPanel>
                <MudExpansionPanel Text="Harvesting">
                    <div class="d-flex flex-wrap">
                        @foreach (Spell spell in Research.Spells.Where(e => e.Harvest != null))
                        {
                            <MudCard Style="border-style: ridge; width: 250px; border-radius: 5px; margin: 3px;" Elevation="2">
                                <MudCardHeader>@spell.Harvest!.HarvestName</MudCardHeader>
                                <MudCardContent>
                                    <MissionInspector Mission="@spell.Harvest!.GetMission" />
                                </MudCardContent>
                                <MudCardActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="() => ViewHarvest(spell)" Color="Color.Info" />
                                    <MudIconButton Icon="@Icons.Material.Filled.MenuBook" OnClick="() => HarvestHunt(spell.Harvest!)" Color="Color.Info" 
                                        Disabled="!(AvailableTeams.Any(e => e.GetAllSoldiers.Any(f => f.TypeID == spell.Harvest!.HunterID)))" />
                                </MudCardActions>
                            </MudCard>
                        }
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudStack Row>
                <MudText>Teams</MudText>
                <MudSpacer />
                <MudNumericField @bind-Value="Damage" Label="Damage" Min="1" Style="width: 100px;" />
            </MudStack>
        </TitleContent>
        <ChildContent>
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th>Team Name</th>
                        <th>Combat</th>
                        <th>Magic</th>
                        <th>Subtlety</th>
                        <th>Heal</th>
                        <th>Travel</th>
                        <th>Research</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Team team in Teams)
                    {
                        <tr>
                            <td>@team.TeamName</td>
                            <td>@team.CScore</td>
                            <td>@team.MScore</td>
                            <td>@team.SScore</td>
                            <td>@team.KScore</td>
                            <td>@team.DScore</td>
                            <td>@team.ResearchDisplay</td>
                            <td>
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="() => team.View = !team.View" Color="Color.Info" />
                            </td>
                        </tr>
                        @if (team.View)
                        {
                            <tr>
                                <td>Soldier</td>
                                <td>Com</td>
                                <td>Mag</td>
                                <td>Sub</td>
                                <td>Travel</td>
                                <td colspan="3">HP</td>
                            </tr>
                            @foreach (Soldier sold in team.GetAllSoldiers)
                            {
                                <tr>
                                    <td>@sold.SoldierName</td>
                                    <td>@sold.Combat</td>
                                    <td>@sold.Magic</td>
                                    <td>@sold.Subtlety</td>
                                    <td>@sold.Travel</td>
                                    <td colspan="2">
                                        <HPInspector Soldier="sold" />
                                    </td>
                                    <td>
                                        <MudButton OnClick="() => Hurt(team,sold)" Color="Color.Error">Hurt</MudButton>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </MudSimpleTable>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>Healing</TitleContent>
        <ChildContent>
            <MudStack Row=true>
                <MudSelect @bind-Value="MedicTeam" T="Team" Label="Medics">
                    @foreach (Team team in Teams.Where(e => e.Soldiers.Any(f => f.IsHealer)))
                    {
                        <MudSelectItem T="Team" Value="@team">@team.TeamName</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect @bind-Value="PatientTeam" T="Team" Label="Patients">
                    @foreach (Team team in Teams.Where(e => e.GetAllSoldiers.Any(f => f.IsInjured)))
                    {
                        <MudSelectItem T="Team" Value="@team">@team.TeamName</MudSelectItem>
                    }
                </MudSelect>
                <MudButton OnClick="OpenHealDialog" Variant="Variant.Filled" Color="Color.Info" Disabled="MedicTeam == null || PatientTeam == null">Heal</MudButton>
            </MudStack>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>Spells</TitleContent>
        <ChildContent>
            <div class="d-flex flex-wrap">
                @foreach (Spell spell in Research.Spells)
                {
                    if (spell.Built != true)
                    {    
                        <MudCard Style="border-style: ridge; width: 250px; border-radius: 5px; margin: 3px;" Elevation="2">
                            <MudCardHeader>@spell.SpellName</MudCardHeader>
                            <MudCardContent>
                                <MudStack>
                                    <MudText>Power: @spell.PowerToCast</MudText>
                                    <MudText>Color: @spell.ColorToCast</MudText>
                                    <MudText>Cost: @spell.MoneyToCast.ToString("C")</MudText>
                                </MudStack>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton OnClick="() => ViewSpell(spell)" Color="Color.Dark" Variant="Variant.Outlined">View</MudButton>
                                <MudButton OnClick="() => SelectTeamForSpell(spell)" Color="spell.Color.Color()" Variant="Variant.Filled" Disabled="!spell.Castable">Cast</MudButton>
                            </MudCardActions>
                        </MudCard>
                    }
                }
            </div>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudDialog @bind-Visible="ViewLead">
    <TitleContent>@SelectedSoldier?.SoldierName</TitleContent>
    <DialogContent>
        <LeadInspector Soldier="SelectedSoldier" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="ViewArt">
    <TitleContent>@SelectedArtifact?.ArtifactName</TitleContent>
    <DialogContent>
        <ArtifactInspector Artifact="SelectedArtifact" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="ViewPow">
    <TitleContent>@SelectedPower?.PowerName</TitleContent>
    <DialogContent>
        <PowerInspector Power="SelectedPower" Powerlevel="SelectedPowerLevel" />
        @if (SelectedPower != null && SelectedPower is Power)
        {
            var power = SelectedPower as Power;
            if (power !=null)
            {
                <MudNumericField @bind-Value="power.Mastery" Min="0.0" Max="1.0" Label="Mastery %" />
            }
        }
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="VisibleStyle">
    <TitleContent>@Clan.Style?.StyleName</TitleContent>
    <DialogContent>
        <StyleTemplateInspector Style="Clan.Style" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="ViewTeamPicker">
    <TitleContent>Select Team</TitleContent>
    <DialogContent>
        <MudSimpleTable Striped Bordered>
            <thead>
                <tr>
                    <th>Team</th>
                    <th>Research</th>
                    <th>Score</th>
                    <th>Colors</th>
                    <th>Select</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Team team in AvailableTeams)
                {
                    <tr>
                        <td>@team.TeamName</td>
                        <td>@team.ResearchDisplay</td>
                        <td>@team.ResearchPower(SelectedColor3 ?? MagicColor.None)</td>
                        <td><MagicIcons Colors="@team.GetColors" /></td>
                        <td><MudIconButton Icon="@Icons.Material.Filled.AddCircleOutline" Color="Color.Success" OnClick="() => FinishAddTeamToProject(team)" /></td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => ViewTeamPicker = false">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="ViewHealDialog">
    <DialogContent>
        <HealInspector MedicTeam="MedicTeam" PatientTeam="PatientTeam" CompleteMission="CloseHealDialog" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="ViewSelectedProject">
    <DialogContent>
        <ProjectInspector Project="SelectedProject2" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => ViewSelectedProject = false">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="ViewSpellDialog">
    <TitleContent>@SelectedSpell?.SpellName</TitleContent>
    <DialogContent>
        <SpellInspector Spell="SelectedSpell" AvailableSoldiers="AvailableSoldiers" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => ViewSpellDialog = false">Close</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="ViewBeastDialog">
    <TitleContent>@SelectedBeast?.FullName</TitleContent>
    <DialogContent>
        <BeastInspector Beast="SelectedBeast" />
    </DialogContent>
</MudDialog>

<MudDialog @bind-Visible="HarvestDialog">
    <TitleContent>@SelectedSpell?.SpellName</TitleContent>
    <DialogContent>
        <HarvestInspector Spell="SelectedSpell" />
    </DialogContent>
</MudDialog>

@code{
    private Clan Clan { get; set; }
    private int ClanLevel { get; set; }
    private Soldier Soldier { get; set; }
    private Team Team { get; set; }
    private Team? SelectedTeam { get; set; } = null;
    private IPower? SelectedPower { get; set; }
    private int? SelectedPowerLevel { get; set; }
    private Artifact? SelectedArtifact { get; set; }
    private Mission Mission { get; set; }
    private IList<Team> Teams { get; set; } = new List<Team>();
    private IList<Team> AvailableTeams
    {
        get
        {
            return new List<Team>{ Team }.Concat(Teams.Where(e => e.MissionID == null)).ToList();
        }
    }
    private IList<Soldier> AvailableSoldiers
    {
        get
        {
            IList<Soldier> ret = new List<Soldier>() { Soldier };
            foreach (Team team in Teams.Where(e => e.MissionID == null || e.MissionID == Guid.Empty))
            {
                ret = ret.Concat(team.GetAllSoldiers.Where(e => !SpellMissions.Select(f => f.TargetSoldier?.ID).Contains(e.ID))).ToList();
            }
            return ret;
        }
    }
    private IList<Soldier> DeadSoldiers { get; set; } = new List<Soldier>();
    private Research Research { get; set; } = new Research();
    protected override void OnInitialized()
    {
        Clan = new Clan();
        Soldier = new Soldier(Clan);
        Team = new Team();
        Mission = new Mission(MissionSeed);
        Timer = new Timer(200);
        Timer.Elapsed += OnTimedEvent;
    }
    private void NewClan()
    {
        Clan = new Clan(ClanLevel,SelectedColor);
        Soldier = new Soldier(Clan);
    }
    private Random r = new Random();
    private void MakeHealer()
    {
        if (Soldier.Medical == null)
            Soldier.Medical = new Medical(Clan.HealElite);
        Soldier.Medical.Assessed = true;
        Soldier.Medical.Trained = true;
        Soldier.Medical.MedicalPowerBase = r.Next(Soldier.HealBase * 10);
    }
    private bool ViewArt = false;
    private void CreateArtifact()
    {
        Soldier.Artifact = new Artifact();
    }
    private void ViewArtifact(Artifact? art)
    {
        SelectedArtifact = art;
        if (art == null)
        {
            ViewArt = false;
            return;
        }
        ViewArt = true;
    }
    private bool ViewPow = false;
    private async Task ViewPower()
    {
        /*var options2 = new DialogOptions();
        options2.CloseOnEscapeKey = true;
        var parameters2 = new DialogParameters();
        parameters2.Add("Power", Clan.Power);
        var dialog2 = dialogService.Show<PowerInspectorDialog>(Clan.Power.PowerName, parameters2, options2);
        var result2 = await dialog2.Result;*/
        SelectedPower = Clan.Power;
        SelectedPowerLevel = null;
        ViewPow = true;
    }
    private void AddSoldier()
    {
        Soldier.HPCurrent = Soldier.HPMax;
        Team.AddSoldier(Soldier);
        Soldier.Team = Team;
        NewSold();
    }
    private void AddLeader()
    {
        Soldier.HPCurrent = Soldier.HPMax;
        Team.AddSoldier(Soldier);
        Soldier.Team = Team;
        Team.MakeLeader(Soldier.ID);
        NewSold();
    }
    private void SoldierPower(Soldier s)
    {
        SelectedPower = s.Power;
        SelectedPowerLevel = s.PowerLevel;
        ViewPow = true;
    }
    private void NewSold()
    {
        Soldier = new Soldier(Clan);
        if (Soldier.Power != null)
            Soldier.Power.Mastery = 0.5 + r.NextDouble()*.3;
    }
    private bool VisibleStyle = false;
    private void ViewStyle()
    {
        VisibleStyle = true;
    }
    private bool ViewLead = false;
    private Soldier? SelectedSoldier { get; set; }
    private void CreateLeadership(Soldier sold)
    {
        sold.LeadershipXP = r.NextDouble()*1.3 - 0.4;
        sold.IsLeading = true;
    }
    private void ViewLeadership(Soldier sold)
    {
        SelectedSoldier = sold;
        ViewLead = true;
    }
    public class ColorPicker
    {
        public string Description { get; set; }
        public MagicColor? Color { get; set; }
    }
    private MagicColor? SelectedColor = null;
    private IList<ColorPicker> ColorOptions = new List<ColorPicker>()
    {
        new ColorPicker { Description="Random", Color=null },
        new ColorPicker { Description="None", Color=MagicColor.None },
        new ColorPicker { Description="Black", Color=MagicColor.Black },
        new ColorPicker { Description="Red", Color=MagicColor.Red },
        new ColorPicker { Description="Green", Color=MagicColor.Green },
        new ColorPicker { Description="Blue", Color=MagicColor.Blue },
        new ColorPicker { Description="White", Color=MagicColor.White },
        new ColorPicker { Description="Purple", Color=MagicColor.Purple },
    };
    private int MissionSeed = 1000;
    private void RegenMission()
    {
        Mission = new Mission(MissionSeed);
    }
    private void AttemptMission()
    {
        if (SelectedTeam == null)
            return;
        (bool, int) success = Mission.CompleteMission(SelectedTeam);
        Snackbar.Add("Mission threshold: " + success.Item2.ToString(),success.Item1 ? Severity.Success : Severity.Error);
    }
    private void AddTeam()
    {
        Teams.Add(Team);
        Research.AddColorFromTeam(Team);
        Team = new Team();
    }
    private void AddFacility()
    {
        Research.AddFacility();
    }
    private MagicColor? SelectedColor2 { get; set; } = MagicColor.None;
    private MagicColor? SelectedColor3 { get; set; } = MagicColor.None;
    private void CreateProject(ResearchFacility facility)
    {
        Research.StartProject(facility, SelectedColor2 ?? MagicColor.None);
    }
    private ResearchProject? SelectedProject { get; set; }
    private bool ViewTeamPicker = false;
    private void StartAddTeamToProject(ResearchProject project)
    {
        SelectedProject = project;
        SelectedColor3 = project.GetColor;
        ViewTeamPicker = true;
    }
    private void FinishAddTeamToProject(Team team)
    {
        if (SelectedProject == null)
            return;
        Research.AddTeamToProject(SelectedProject, team);
        ViewTeamPicker = false;
        SelectedProject = null;
        SelectedColor3 = null;
    }
    private void Increment(ResearchFacility facility)
    {
        facility.NumTeams++;
    }
    private int NumDays = 1;
    private void IncrementDay()
    {
        for (int i = 0; i < NumDays; i++)
        {
            IList<string> msgs = Research.IncrementDay();
            IList<Team> UnBusy = new List<Team>();
            int j = 0;
            while (j < HunterMissions.Count)
            {
                bool? result = HunterMissions[j].IncrementDay();
                if (result != null)
                {
                    if (result == true)
                    {
                        if (HunterMissions[j].Type == MissionType.TameBeast)
                        {
                            Soldier? soldier = HunterMissions[j].AttemptingTeam!.GetAllSoldiers.FirstOrDefault(e => e.ID == HunterMissions[j].HunterID);
                            if (soldier != null)
                            {
                                Spell? spell = Research.Spells.FirstOrDefault(e => e.Beast?.ID == HunterMissions[j].TargetID);
                                if (spell?.Beast != null)
                                {
                                    Soldier newbeast = spell.Beast.GenerateBeast(soldier.GivenName);
                                    HunterMissions[j].AttemptingTeam!.AddSoldier(newbeast);
                                    soldier.AddSub(newbeast);
                                    Snackbar.Add("Taming mission succeeded!", Severity.Success);
                                }
                            }
                        }
                        else if (HunterMissions[j].Type == MissionType.Harvest)
                        {
                            Spell? spell = Research.Spells.FirstOrDefault(e => e.Harvest?.ID == HunterMissions[j].TargetID);
                            if (spell != null)
                            {
                                spell.Consumables+=spell.Harvest!.GetYield();
                                Snackbar.Add("Harvesting mission succeeded!", Severity.Success);
                            }
                        }
                        
                    }
                    else
                    {
                        Snackbar.Add("Taming mission failed!", Severity.Error);
                    }
                    UnBusy.Add(HunterMissions[j].AttemptingTeam!);
                    HunterMissions.RemoveAt(j);
                }
                else
                    j++;
            }
            foreach (string msg in msgs)
            {
                Snackbar.Add(msg, msg.Contains("discover") ? Severity.Success : Severity.Info);
            }
            j = 0;
            while (j < SpellMissions.Count)
            {
                Spell? spell = SpellMissions[j].AdvanceDay();
                if (spell != null)
                {
                    if (spell.Power != null && SpellMissions[j].TargetSoldier != null)
                    {
                        SpellMissions[j].TargetSoldier!.Power = spell.Power.GeneratePower();
                        Snackbar.Add(spell.Power.PowerName + " implanted in " + SpellMissions[j].TargetSoldier!.SoldierName + "!", Severity.Success);
                    }
                    else if (spell.Beast != null)
                    {
                        SpellMissions[j].CastingSpell.Consumables+=SpellMissions[j].NumConsumables;
                        Snackbar.Add("1 " + spell.Beast.ToolName + " " + spell.ConsumableName + " created to tame the " + spell.Beast.FullName + "!", Severity.Success);
                    }
                    else if (spell.Harvest != null)
                    {
                        SpellMissions[j].CastingSpell.Consumables-=SpellMissions[j].NumConsumables;
                        SpellMissions[j].CastingSpell.ProcessedConsumables+=SpellMissions[j].NumConsumables;
                        Snackbar.Add(spell.Harvest.HarvestName + " prepared!", Severity.Success);
                    }
                    else if (spell.Spirit != null)
                    {
                        Team.Soldiers.Add(spell.Spirit.GenerateSoldier());
                        Snackbar.Add(spell.Spirit.GetName + " summoned!", Severity.Success);
                    }
                    else if (spell.SpiritArtifact != null)
                    {
                        Soldier.Artifact = spell.SpiritArtifact.Artifact;
                        Team.Soldiers.Add(spell.SpiritArtifact.Spirit);
                        spell.Built = true;
                        Snackbar.Add(spell.SpiritArtifact.Artifact.ArtifactName + " constructed!", Severity.Success);
                    }
                    else if (spell.LesserUndead != null)
                    {
                        spell.Consumables += SpellMissions[j].NumConsumables;
                        Snackbar.Add(SpellMissions[j].NumConsumables + " " + spell.ConsumablePrint + " built to summon " + spell.LesserUndead.UndeadName + (SpellMissions[j].NumConsumables == 1 ? "" : "s"), Severity.Success);
                    }
                    else if (spell.GreaterUndead != null && SpellMissions[j].TargetSoldier != null)
                    {
                        spell.GreaterUndead.Apply(SpellMissions[j].TargetSoldier!);
                        Team.AddSoldier(SpellMissions[j].TargetSoldier!);
                        Snackbar.Add(SpellMissions[j].TargetSoldier!.SoldierName + " has been resurrected as a " + spell.GreaterUndead.UndeadName + "!", Severity.Success);
                    }
                    else if (spell.LesserDemon != null)
                    {
                        int ndemons = SpellMissions[j].NumConsumables ?? 1;
                        for (int k = 0; k < ndemons; k++)
                        {
                            Team.AddSoldier(spell.LesserDemon.GenerateSoldier());
                        }
                        Snackbar.Add(ndemons + " " + spell.LesserDemon.DemonName + (ndemons == 1 ? "" : "s") + " summoned!", Severity.Success);
                    }
                    else if (spell.GreaterDemon != null && SpellMissions[j].TargetSoldier != null)
                    {
                        Snackbar.Add(SpellMissions[j].TargetSoldier!.SoldierName + " has become " + spell.GreaterDemon.DemonName, Severity.Success);
                        spell.GreaterDemon.Apply(SpellMissions[j].TargetSoldier!);
                    }
                    SpellMissions[j].CastingTeam.MissionID = null;
                    if (SpellMissions[j].TargetSoldier?.Team != null)
                        UnBusy.Add(SpellMissions[j].TargetSoldier!.Team!);
                    SpellMissions.RemoveAt(j);
                }
                else
                {
                    j++;
                }
            }
            foreach (Team team in UnBusy)
            {
                bool found = false;
                foreach (SpellMission mission in SpellMissions)
                {
                    if (team.ID == mission.TargetSoldier?.Team?.ID)
                    {
                        found = true;
                        break;
                    }
                }
                if (!found)
                    team.MissionID = null;
            }
        }
    }
    private int Damage { get; set; } = 1;
    private void Hurt(Team team, Soldier s)
    {
        if (s.Health == HealthLevel.Uninjured)
            s.HPCurrent = s.HPMax;
        s.Hurt(Damage);
        if (s.HPCurrent < 0 || s.Health == HealthLevel.Dead)
        {
            team.RemoveSoldier(s);
            if (!DeadSoldiers.Contains(s))
                DeadSoldiers.Add(s);
            foreach (Spell spell in Research.Spells)
            {
                if (spell.GreaterDemon != null && spell.GreaterDemon.Invested?.ID == s.ID)
                {
                    spell.GreaterDemon.Invested = null;
                    s.Power = null;
                }
            }
        }
        StateHasChanged();
    }
    private void CloseHealDialog()
    {
        ViewHealDialog = false;
        MedicTeam = null;
        PatientTeam = null;
    }
    private void OpenHealDialog()
    {
        ViewHealDialog = true;
    }
    private Team? MedicTeam { get; set; } = null;
    private Team? PatientTeam { get; set; } = null;
    private bool ViewHealDialog { get; set; } = false;
    private ResearchProject? SelectedProject2 { get; set; } = null;
    private bool ViewSelectedProject { get; set; } = false;
    private void ViewProject(ResearchProject project)
    {
        SelectedProject2 = project;
        ViewSelectedProject = true;
    }
    private IList<SpellMission> SpellMissions { get; set; } = new List<SpellMission>();
    private async Task SelectTeamForSpell(Spell spell)
    {
        IList<Team> EligibleTeams = AvailableTeams.Where(e => spell.ColorToCast == 0 || e.GetColors.Count(f => f == spell.Color) > 0).ToList();
        if (spell.MagPowerToCast != null)
        {
            EligibleTeams = EligibleTeams.Where(e => e.Soldiers.Any(f => spell.CanCast(f))).ToList();
        }
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        parameters.Add("AvailableTeams", EligibleTeams);
        parameters.Add("MScore", true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                Soldier? caster = null;
                if (spell.MagPowerToCast != null)
                {
                    var options2 = new DialogOptions();
                    options2.CloseOnEscapeKey = true;
                    var parameters2 = new DialogParameters();
                    IList<Soldier> Casters = team.Soldiers.Where(e => spell.CanCast(e)).ToList();
                    parameters2.Add("Soldiers", Casters);
                    var dialog2 = dialogService.Show<SoldierPicker>("Select Caster", parameters2, options2);
                    var result2 = await dialog2.Result;
                    if (!result2.Canceled)
                    {
                        caster = result2.Data as Soldier;
                        if (caster == null)
                            return;
                    }
                }
                Snackbar.Add((caster == null ? team.TeamName : caster.SoldierName) + " selected to cast " + spell.SpellName, Severity.Info);
                int? quantity = null;
                if (spell.CastQuantity)
                {
                    options = new DialogOptions();
                    options.CloseOnEscapeKey = true;
                    parameters = new DialogParameters();
                    parameters.Add("Max", spell.CastLimit(9999999));//for testing
                    parameters.Add("Label", "# to cast");
                    dialog = dialogService.Show<NumberPicker>("# " + spell.ConsumablePrint + " to cast", parameters, options);
                    result = await dialog.Result;
                    if (!result.Canceled)
                    {
                        quantity = result.Data as int?;
                    }
                    else
                    {
                        return;
                    }
                }
                if (spell.TargetSoldier)
                {
                    options = new DialogOptions();
                    options.CloseOnEscapeKey = true;
                    parameters = new DialogParameters();
                    IList<Soldier> SoldiersToSelect;
                    if (spell.GreaterUndead != null)
                    {
                        SoldiersToSelect = DeadSoldiers.Where(e => spell.GreaterUndead.IsEligible(e)).ToList();
                    }
                    else
                    {
                        SoldiersToSelect = AvailableSoldiers.Where(e => e.Power == null && e.Team?.ID != team.ID && (!SpellMissions.Select(f => f.TargetSoldier?.ID).ToList().Contains(e.ID))).ToList();
                    }
                    if (spell.GreaterDemon != null)
                    {
                        SoldiersToSelect = SoldiersToSelect.Where(e => spell.GreaterDemon.IsEligible(e)).ToList();
                    }
                    parameters.Add("Soldiers", SoldiersToSelect);
                    dialog = dialogService.Show<SoldierPicker>("Select Soldier", parameters, options);
                    result = await dialog.Result;
                    if (!result.Canceled)
                    {
                        Soldier? soldier = result.Data as Soldier;
                        if (soldier != null)
                        {
                            if (soldier.Team != null)//always true in tutorial
                            {
                                soldier.Team.MissionID = Guid.Empty;
                            }
                            SpellMissions.Add(new SpellMission(spell, team, caster, soldier, quantity));
                        }
                    }
                }
                else
                {
                    SpellMissions.Add(new SpellMission(spell, team, caster, null, quantity));
                }
            }
        }
    }
    private Spell? SelectedSpell { get; set; }
    private bool ViewSpellDialog { get; set; } = false;
    private void ViewSpell(Spell spell)
    {
        SelectedSpell = spell;
        ViewSpellDialog = true;
    }
    private Beast? SelectedBeast { get; set; }
    private bool ViewBeastDialog { get; set; } = false;
    private void BeastView(Beast beast)
    {
        SelectedBeast = beast;
        ViewBeastDialog = true;
    }
    IList<HunterMission> HunterMissions { get; set; } = new List<HunterMission>();
    private async Task BeastCast(Spell spell)
    {
        if (spell.Beast == null)
            return;
        IList<Team> eligible = new List<Team>();
        foreach (Team team in AvailableTeams)
        {
            bool found = false;
            foreach (Soldier soldier in team.GetAllSoldiers)
            {
                if (spell.Beast.IsEligible(soldier))
                {
                    found = true;
                    break;
                }
            }
            if (found)
                eligible.Add(team);
        }
        //IList<Team> eligible = AvailableTeams.Where(e => e.GetAllSoldiers.Any(f => spell.Beast.IsEligible(f))).ToList();
        if (eligible.Count == 0)
        {
            Snackbar.Add("No teams have eligible soldiers to tame the " + spell.SpellName + "!", Severity.Warning);
            return;
        }
        if (spell.Consumables == 0)
        {
            Snackbar.Add("No " + spell.ConsumableName+"s available to tame the " + spell.SpellName + "!", Severity.Warning);
            return;
        }
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        parameters.Add("AvailableTeams", eligible);
        parameters.Add("MScore", true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                options = new DialogOptions();
                options.CloseOnEscapeKey = true;
                parameters = new DialogParameters();
                parameters.Add("Soldiers", team.GetAllSoldiers.Where(e => spell.Beast.IsEligible(e)).ToList());
                dialog = dialogService.Show<SoldierPicker>("Select Tamer", parameters, options);
                result = await dialog.Result;
                if (!result.Canceled)
                {
                    Soldier? soldier = result.Data as Soldier;
                    if (soldier != null)
                    {
                        HunterMission huntermission = spell.Beast.StartMission();
                        huntermission.TargetID = spell.Beast.ID;
                        huntermission.HunterID = soldier.ID;
                        HunterMissions.Add(huntermission);
                        team.MissionID = huntermission.ID;
                        huntermission.StartMission(team);
                        spell.Consumables--;
                    }
                }
            }
        }
    }
    private BeastHarvest? SelectedHarvest { get; set; }
    private bool HarvestDialog { get; set; } = false;
    private void ViewHarvest(Spell spell)
    {
        SelectedSpell = spell;
        HarvestDialog = true;
    }
    private async Task HarvestHunt(BeastHarvest harvest)
    {
        var options = new DialogOptions();
        options.CloseOnEscapeKey = true;
        var parameters = new DialogParameters();
        parameters.Add("AvailableTeams", AvailableTeams.Where(e => e.GetAllSoldiers.Any(e => e.TypeID == harvest.HunterID)).ToList());
        parameters.Add("AllScores", true);
        var dialog = dialogService.Show<TeamPicker>("Select Team", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Team? team = result.Data as Team;
            if (team != null)
            {
                HunterMission huntermission = harvest.StartMission();
                huntermission.TargetID = harvest.ID;
                HunterMissions.Add(huntermission);
                team.MissionID = huntermission.ID;
                huntermission.StartMission(team);
            }
        }
    }
    private void AddRunningMission()
    {
        RunningMission mission = new RunningMission("Test Mission #" + (RunningMissions.Count+1), 0,0,0,20);
        mission.Mission = Mission;
        mission.Team = SelectedTeam!;
        RunningMissions.Add(mission);
        Timer.Enabled = true;
        Mission = new Mission(MissionSeed);
    }
    private List<RunningMission> RunningMissions { get; set; } = [];
    private List<RunningMission> FinishedMissions { get; set; } = [];
    private Timer Timer { get; set; }
    public class RunningMission
    {
        public string MissionName { get; set; }
        public DateTime DueTime { get; set; }
        public Team Team { get; set; }
        public Mission Mission { get; set; }
        public string RemainingTime { get { return (DueTime - DateTime.UtcNow).ToString(@"d\.hh\:mm\:ss"); } }
        public RunningMission(string name, int days, int hours, int minutes, int seconds)
        {
            MissionName = name;
            DueTime = DateTime.UtcNow.AddDays(days).AddHours(hours).AddMinutes(minutes).AddSeconds(seconds);
        }
    }
    private async void OnTimedEvent(Object? source, ElapsedEventArgs args)
    {
        await InvokeAsync(() => {
            int i = 0;
            while (i < RunningMissions.Count)
            {
                if (RunningMissions[i].DueTime <= DateTime.UtcNow)
                {
                    FinishedMissions.Add(RunningMissions[i]);
                    RunningMissions.RemoveAt(i);
                }
                else
                {
                    i++;
                }
            }
            StateHasChanged();
        });
    }
}